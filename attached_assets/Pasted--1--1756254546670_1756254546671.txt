# الخطة الاستراتيجية الشاملة والمفصلة لمنصة "بنّاء اليمن" الرقمية

**المؤلف:** 
## 1. المقدمة

تهدف هذه الوثيقة إلى تقديم خطة استراتيجية شاملة ومفصلة لتطوير وتحسين منصة "بنّاء اليمن" الرقمية، مع الأخذ في الاعتبار الإنجازات الحالية للمشروع، والوثائق الاستراتيجية السابقة، بالإضافة إلى الوثائق القانونية والإجرائية الجديدة التي تم تحليلها: "دليل استخدام خدمة إصدار قرار مساحي" [1] و "لائحة قانون التخطيط الحضري" [2].

تعتبر منصة "بنّاء اليمن" مشروعًا حيويًا يهدف إلى رقمنة وتبسيط الإجراءات المتعلقة بالمسح العقاري والتخطيط الحضري في اليمن، مما يسهم في تحقيق رؤية "بناء اليمن" الرقمية. ستغطي هذه الخطة الجوانب التقنية، التشغيلية، والإدارية لضمان تطوير نظام متكامل وفعال يلبي احتياجات المستخدمين ويحقق الأهداف الاستراتيجية.

## 2. تحليل الوضع الحالي والإنجازات

لقد تم إحراز تقدم كبير في تطوير الواجهات الأمامية للتطبيق، بما في ذلك:

*   **لوحة تحكم المساح (Dashboard):** تم تطوير واجهة احترافية وجذابة تعرض إحصائيات المساح والطلبات المتاحة، مع تصميم مستوحى من واجهة "بلدي".
*   **تطبيق المسح الميداني (Field App):** تم إعادة بناء واجهة تطبيق المسح الميداني لتكون أكثر حداثة وفعالية، مع أزرار منبثقة وتصميم مبسط، وتحسينات في التنقل ودعم شاشات الجوال.
*   **ربط قاعدة البيانات:** تم ربط التطبيق بقاعدة بيانات PostgreSQL باستخدام NeonDB، مما يوفر حل تخزين سحابي للبيانات المساحية.
*   **التكامل مع Git:** يتم استخدام Git للمزامنة والتحكم في الإصدارات، مما يضمن سير عمل تطوير منظم.

**ملخص الإنجازات الرئيسية:**

| الميزة | الوصف | الحالة | الملاحظات |
|---|---|---|---|
| واجهة المساح الرئيسية | تصميم احترافي لعرض الإحصائيات والطلبات | مكتمل | تم استلهام التصميم من واجهة "بلدي" |
| تطبيق المسح الميداني | واجهة مستخدم محسنة مع أزرار منبثقة | مكتمل | تم إعادة بناء الواجهة لزيادة الفعالية |
| ربط قاعدة البيانات | استخدام NeonDB لتخزين بيانات PostgreSQL | مكتمل | يوفر حل تخزين سحابي |
| التحكم في الإصدارات | استخدام Git للمزامنة وإدارة الكود | مكتمل | يضمن سير عمل تطوير منظم |

## 3. تحليل الوثائق الجديدة وتأثيرها على الخطة

تم تحليل وثيقتين جديدتين بعمق لضمان توافق الخطة مع المتطلبات القانونية والإجرائية:

### 3.1. "دليل استخدام خدمة إصدار قرار مساحي" [1]

هذا الدليل يقدم وصفًا تفصيليًا لخطوات إصدار القرار المساحي، بدءًا من تقديم الطلب وحتى المعالجة الداخلية من قبل الأقسام المختصة. النقاط الرئيسية المستخلصة هي:

*   **دورة حياة الطلب:** يوضح الدليل المراحل المختلفة لطلب القرار المساحي، بما في ذلك تقديم الطلب، تعبئة بيانات مقدم الطلب، تحديد الموقع الجغرافي، رفع المرفقات، طباعة الفاتورة والسداد، والمعالجة الداخلية (تأكيد السداد، مصادقة خدمة الجمهور، إشعار مدير القسم، توجيه التكليف للمهندس).
*   **دور المهندس المساح:** يركز الدليل على الخطوات التي يقوم بها المهندس المساح في المرحلة الأخيرة، وتشمل: رفع ملف Shapefile، تحديد الأبعاد والحدود، وإدخال اشتراطات البناء.
*   **البيانات المطلوبة:** يحدد الدليل أنواع البيانات والمرفقات المطلوبة في كل مرحلة، مثل رقم الهوية، نوع الوثيقة، مساحة الأرض، الغرض من القرار المساحي، صور الصكوك، والإحداثيات الدقيقة.
*   **التكاملات:** يشير الدليل إلى الحاجة إلى إشعارات (SMS) وتكامل مع نظام داخلي لإدارة التكليفات.

> "ي حاسم رارق رادصإ ةمدخ دعُت "ءانب" ةصنم يف ةيمقرلا تامدخلا مهأ ىدحإ ميدقت نم نيديفتسملا نكّ مت ثيح ،ةطسبمو ةلهس ةقيرطب اًينورتكلإ تابلطلا ميدقت نم نيديفتسملا نكّ مت ثيح ،ةطسبمو ةلهس ةقيرطب اًينورتكلإ تابلطلا قرفلا فيلكتو ،اهدامتعا ،تابلطلا ةرادإ نم ةصتخملا ةهجلا نكّ متو ،ةدحوم ةيمقر ةئيب نمض كلذ لكو ،يناديملا لوزنلاب ةينفلا." [1]

### 3.2. "لائحة قانون التخطيط الحضري" [2]

هذه اللائحة هي وثيقة قانونية شاملة تحدد الإطار التنظيمي للتخطيط الحضري. على الرغم من أنها وثيقة قانونية عامة، إلا أنها تحتوي على مبادئ وتوجيهات تؤثر بشكل مباشر على تصميم وتنفيذ الأنظمة المتعلقة بالمسح والتخطيط. النقاط ذات الصلة تشمل:

*   **السلطات التخطيطية:** تحدد اللائحة الهيكل التنظيمي للسلطات المسؤولة عن التخطيط الحضري، مما يشير إلى ضرورة وجود أدوار وصلاحيات واضحة داخل النظام الرقمي تعكس هذا الهيكل (مثل المجلس الأعلى للتخطيط الحضري، قطاع التخطيط بالوزارة، اللجان الفنية).
*   **أهداف التخطيط:** تضع اللائحة أهدافًا عامة للتخطيط الحضري، مثل رسم السياسات العامة، تحديد أولويات التخطيط، الاستخدام الأمثل للأراضي، وتطوير المناطق. هذه الأهداف يجب أن تكون موجهة لتصميم ميزات النظام التي تدعم التخطيط المستدام.
*   **إجراءات التخطيط:** تتناول اللائحة إجراءات إعداد واعتماد المخططات الهيكلية والتفصيلية، وتعديلها، مما يؤكد على أهمية وجود سير عمل مرن وقابل للتخصيص داخل المنصة لدعم هذه الإجراءات القانونية.
*   **البيانات والمعلومات:** تشير اللائحة إلى أهمية الدراسات والتحليلات والمعلومات المتعلقة بالتخطيط، مما يدعم الحاجة إلى نظام قوي لإدارة البيانات المساحية والتخطيطية، وربما التكامل مع مصادر بيانات أخرى.

> "يرضحلا طيطختلا نوناقل ةيذيفنتلا ةحئلالا" [2]

## 4. الخطة الاستراتيجية الشاملة والمفصلة

بناءً على التحليل الشامل للوضع الحالي، الإنجازات، والمتطلبات المستخلصة من الوثائق الجديدة، نقدم الخطة الاستراتيجية التالية لتطوير منصة "بنّاء اليمن" الرقمية. تم تقسيم الخطة إلى مراحل رئيسية، كل مرحلة تحتوي على مهام فرعية مفصلة.

### المرحلة 1: تعزيز البنية التحتية وإدارة البيانات (الأساس)

**الهدف:** بناء أساس متين وقابل للتوسع لإدارة جميع أنواع البيانات المطلوبة للمنصة، مع التركيز على البيانات المساحية والقانونية.

**المهام الفرعية:**

*   **1.1. تطوير قاعدة البيانات الشاملة (PostgreSQL/Supabase):**
    *   **1.1.1. تصميم نموذج البيانات (Data Model):** بناء نموذج بيانات شامل يستوعب جميع الكيانات المحددة في "دليل استخدام خدمة إصدار قرار مساحي" [1] و "لائحة قانون التخطيط الحضري" [2]، بما في ذلك: بيانات مقدمي الطلبات، تفاصيل الطلبات، المواقع الجغرافية (نقاط، خطوط، مضلعات)، المرفقات، بيانات المساحين، التكليفات، اشتراطات البناء، والبيانات القانونية المتعلقة بالمخططات.
    *   **1.1.2. تنفيذ جداول قاعدة البيانات (Schema Implementation):** إنشاء الجداول والعلاقات اللازمة في قاعدة بيانات PostgreSQL (على Supabase) لتعكس نموذج البيانات المصمم.
    *   **1.1.3. تحسين أداء قاعدة البيانات (Performance Optimization):** تطبيق الفهارس (Indexes) وتحسين الاستعلامات لضمان سرعة الوصول إلى البيانات، خاصة للبيانات الجغرافية.
    *   **1.1.4. إدارة البيانات الجغرافية (Geospatial Data Management):** استخدام امتدادات PostgreSQL مثل PostGIS لتخزين ومعالجة البيانات الجغرافية بكفاءة، ودعم استيراد ملفات Shapefile.

*   **1.2. تطوير واجهة برمجة التطبيقات (API) للبيانات:**
    *   **1.2.1. تصميم نقاط النهاية (Endpoints):** إنشاء نقاط نهاية API آمنة وفعالة لجميع العمليات المتعلقة بالبيانات (إنشاء، قراءة، تحديث، حذف) للكيانات المختلفة (الطلبات، المساحين، المواقع، المرفقات، إلخ).
    *   **1.2.2. تطبيق منطق الأعمال (Business Logic):** دمج منطق الأعمال المستخلص من "دليل استخدام خدمة إصدار قرار مساحي" [1] في طبقة API، مثل التحقق من صحة البيانات، إدارة حالة الطلب، وإنشاء التكليفات.
    *   **1.2.3. المصادقة والتفويض (Authentication & Authorization):** تطبيق آليات قوية للمصادقة (مثل JWT) والتفويض لضمان أن المستخدمين المصرح لهم فقط يمكنهم الوصول إلى البيانات والوظائف المناسبة لأدوارهم (مقدم طلب، مساح، مدير، موظف خدمة عملاء).

### المرحلة 2: تطوير واجهات المستخدم وتجربة المستخدم (UX/UI)

**الهدف:** بناء واجهات مستخدم بديهية وجذابة تلبي احتياجات جميع أصحاب المصلحة، مع التركيز على تحسين تجربة المستخدم.

**المهام الفرعية:**

*   **2.1. تطوير واجهة الإدارة (Admin Dashboard):**
    *   **2.1.1. لوحة تحكم شاملة:** تصميم وتنفيذ لوحة تحكم للمسؤولين ومديري الأقسام لعرض نظرة عامة على النظام (عدد الطلبات، حالاتها، أداء المساحين، إلخ).
    *   **2.1.2. إدارة الطلبات:** واجهة لإدارة دورة حياة الطلبات (استلام، مراجعة، تعيين، متابعة، إغلاق) وفقًا للخطوات المحددة في الدليل [1].
    *   **2.1.3. إدارة المستخدمين والأدوار:** واجهة لإدارة حسابات المستخدمين (مقدمي الطلبات، المساحين، الموظفين) وتعيين الأدوار والصلاحيات بناءً على الهيكل التنظيمي المقترح في اللائحة [2].
    *   **2.1.4. إدارة التكليفات:** واجهة لإنشاء وتعيين التكليفات للمساحين، وتتبع تقدمها.
    *   **2.1.5. إدارة المرفقات:** واجهة لعرض وإدارة المرفقات التي يرفعها مقدمو الطلبات والمساحون.

*   **2.2. تحسين وتوسيع تطبيق المساح الميداني (Mobile Field App):**
    *   **2.2.1. واجهة تسجيل الدخول:** تنفيذ واجهة تسجيل دخول آمنة للمساحين.
    *   **2.2.2. قائمة التكليفات:** واجهة لعرض قائمة بالتكليفات المعينة للمساح، مع تفاصيل كل تكليف (الموقع، نوع الطلب، المرفقات).
    *   **2.2.3. واجهة المسح الميداني التفاعلية:** تحسين الواجهة الحالية لتشمل:
        *   **استيراد ملفات Shapefile:** دعم استيراد ملفات Shapefile مباشرة في التطبيق لعرضها على الخريطة [1].
        *   **أدوات الرسم والتحرير:** أدوات متقدمة لرسم وتعديل النقاط، الخطوط، والمضلعات على الخريطة، مع دعم تحديد الأبعاد والحدود تلقائيًا [1].
        *   **إدخال اشتراطات البناء:** واجهة لإدخال اشتراطات البناء (الارتدادات، عدد الطوابق، نسبة البناء، الأنشطة المسموحة) بناءً على الموقع والمخطط التنظيمي [1].
        *   **التقاط الإحداثيات:** دمج وظيفة التقاط الإحداثيات الدقيقة من أجهزة GNSS [1].
        *   **إدارة المرفقات:** إمكانية رفع صور ومستندات إضافية من الموقع.
    *   **2.2.4. التزامن دون اتصال (Offline Sync):** تمكين المساحين من العمل دون اتصال بالإنترنت وتزامن البيانات عند الاتصال.

*   **2.3. تطوير واجهة مقدم الطلب (Applicant Portal):**
    *   **2.3.1. تسجيل الدخول/التسجيل:** واجهة آمنة لمقدمي الطلبات.
    *   **2.3.2. تقديم الطلبات:** واجهة سهلة الاستخدام لتقديم طلبات القرار المساحي، مع خطوات واضحة لتعبئة البيانات، تحديد الموقع، ورفع المرفقات [1].
    *   **2.3.3. تتبع حالة الطلب:** واجهة لعرض حالة الطلبات المقدمة وتتبع تقدمها في دورة الحياة.
    *   **2.3.4. الفواتير والسداد:** واجهة لعرض الفواتير وإرشادات السداد.

### المرحلة 3: التكاملات والإشعارات

**الهدف:** ربط المنصة بالأنظمة الخارجية وتوفير قنوات اتصال فعالة للمستخدمين.

**المهام الفرعية:**

*   **3.1. التكامل مع أنظمة الدفع:**
    *   **3.1.1. بوابة دفع إلكترونية:** دمج بوابة دفع إلكترونية لتسهيل سداد رسوم الخدمات.
    *   **3.1.2. تأكيد السداد:** تطوير آلية لتأكيد السداد وتحديث حالة الطلب تلقائيًا.

*   **3.2. نظام الإشعارات:**
    *   **3.2.1. إشعارات داخل التطبيق:** إشعارات للمستخدمين (مقدمي الطلبات، المساحين، المديرين) حول تحديثات حالة الطلب، التكليفات الجديدة، إلخ.
    *   **3.2.2. إشعارات SMS/البريد الإلكتروني:** إشعارات خارجية عبر الرسائل النصية والبريد الإلكتروني للمستخدمين [1].

*   **3.3. التكامل مع أنظمة خارجية (مستقبلًا):**
    *   **3.3.1. أنظمة GIS/CAD:** تكامل أعمق مع برامج نظم المعلومات الجغرافية (GIS) والتصميم بمساعدة الحاسوب (CAD) لتبادل البيانات بسلاسة.
    *   **3.3.2. أنظمة التخطيط الحضري:** تكامل مع أي أنظمة حكومية أخرى ذات صلة بالتخطيط الحضري لتبادل البيانات القانونية والمخططات [2].

### المرحلة 4: الاختبار، النشر، والصيانة

**الهدف:** ضمان جودة النظام، نشره بشكل فعال، وصيانته المستمرة.

**المهام الفرعية:**

*   **4.1. الاختبار الشامل:**
    *   **4.1.1. اختبار الوحدة (Unit Testing):** اختبار كل مكون برمجي على حدة.
    *   **4.1.2. اختبار التكامل (Integration Testing):** اختبار تفاعل المكونات المختلفة مع بعضها البعض.
    *   **4.1.3. اختبار النظام (System Testing):** اختبار النظام ككل لضمان تلبية المتطلبات الوظيفية وغير الوظيفية.
    *   **4.1.4. اختبار القبول (Acceptance Testing):** اختبار النظام من قبل المستخدمين النهائيين (مقدمي الطلبات، المساحين، المديرين) للتأكد من أنه يلبي احتياجاتهم.

*   **4.2. النشر (Deployment):**
    *   **4.2.1. إعداد بيئة الإنتاج:** إعداد خوادم الإنتاج وقواعد البيانات.
    *   **4.2.2. النشر المستمر (CI/CD):** إعداد خطوط أنابيب التكامل المستمر والنشر المستمر لأتمتة عملية النشر.

*   **4.3. الصيانة والدعم:**
    *   **4.3.1. المراقبة (Monitoring):** مراقبة أداء النظام وتحديد المشكلات المحتملة.
    *   **4.3.2. التحديثات:** إصدار تحديثات منتظمة لتحسين الأداء وإضافة ميزات جديدة.
    *   **4.3.3. الدعم الفني:** توفير دعم فني للمستخدمين لحل المشكلات والاستفسارات.

## 5. الجدول الزمني المقترح (تقديري)

سيتم تحديد جدول زمني تفصيلي لكل مهمة فرعية بعد الموافقة على الخطة العامة، ولكن يمكن تقدير الإطار الزمني العام كالتالي:

*   **المرحلة 1 (البنية التحتية والبيانات):** 4-6 أسابيع
*   **المرحلة 2 (واجهات المستخدم):** 8-12 أسبوعًا
*   **المرحلة 3 (التكاملات والإشعارات):** 3-4 أسابيع
*   **المرحلة 4 (الاختبار والنشر والصيانة):** 2-3 أسابيع

**إجمالي الوقت المقدر:** 17-25 أسبوعًا (حوالي 4-6 أشهر).

## 6. الموارد المطلوبة

*   **فريق التطوير:** مطورو الواجهة الأمامية، مطورو الواجهة الخلفية، مهندس قواعد بيانات، مصمم UX/UI، مهندس DevOps، مختبر جودة.
*   **الأدوات والتقنيات:** React/Next.js، Node.js/Express، PostgreSQL/Supabase، PostGIS، Git، Framer Motion، أدوات CI/CD.
*   **البنية التحتية:** خوادم سحابية (مثل Replit، أو AWS/Google Cloud/Azure)، خدمات قواعد بيانات مدارة.

## 7. المخاطر المحتملة والتخفيف

| المخاطرة | التخفيف المقترح |
|---|---|
| تعقيد البيانات الجغرافية | استخدام PostGIS، الاستعانة بخبراء GIS، اختبارات مكثفة للبيانات الجغرافية |
| التوافق مع اللوائح القانونية | مراجعة مستمرة مع خبراء قانونيين، تصميم سير عمل مرن وقابل للتعديل |
| أداء النظام مع زيادة المستخدمين | تحسين أداء قاعدة البيانات، استخدام حلول تخزين سحابية قابلة للتوسع، مراقبة الأداء المستمرة |
| تحديثات الأجهزة المساحية | تصميم API مرن يدعم أنواعًا مختلفة من الأجهزة، توفير تحديثات منتظمة للتطبيق |

## 8. الخلاصة

تمثل هذه الخطة الاستراتيجية خارطة طريق شاملة لتطوير منصة "بنّاء اليمن" الرقمية إلى نظام متكامل وفعال يدعم رقمنة خدمات المسح العقاري والتخطيط الحضري. من خلال الالتزام بهذه الخطة، يمكننا بناء منصة قوية وموثوقة تسهم بشكل كبير في تحقيق الأهداف الاستراتيجية لرؤية "بناء اليمن" الرقمية.





### 2.1. تفصيل الإنجازات الحالية:

لقد تم إحراز تقدم ملموس في تطوير الواجهات الأمامية للتطبيق، مما يمثل أساسًا قويًا للبناء عليه. الإنجازات الرئيسية تشمل:

*   **لوحة تحكم المساح (Dashboard):** تم تصميم وتطوير واجهة مستخدم احترافية وجذابة للمساحين، مستوحاة بشكل كبير من واجهة "بلدي" الحكومية لضمان تجربة مستخدم مألوفة وفعالة. هذه اللوحة تعرض ملخصًا لأداء المساح، مثل عدد المشاريع المكتملة، إجمالي الطلبات، والأيام النشطة، بالإضافة إلى عرض "الإجراءات الأخيرة" التي توضح حالة الطلبات الأخيرة (مكتمل، معلق، مرفوض). هذا يوفر للمساح نظرة سريعة وشاملة على مهامه وأدائه.

*   **تطبيق المسح الميداني (Field App):** تم إعادة بناء وتطوير واجهة تطبيق المسح الميداني بشكل جذري. الواجهة الجديدة تتميز بتصميم أكثر حداثة وبساطة، مع التركيز على سهولة الاستخدام في البيئة الميدانية. تم دمج "أزرار منبثقة" (Floating Action Buttons - FABs) لتوفير وصول سريع ومرن للأدوات الأساسية مثل تحديد الموقع الحالي، تشغيل/إيقاف الالتقاط، التسجيل باستخدام GPS، إدارة الطبقات، تحريك/حذف النقاط، إضافة إحداثيات، وإضافة نقاط. هذا التحسين يهدف إلى جعل عملية المسح أكثر كفاءة وتفاعلية. كما تم تحسين نظام التنقل ليشمل شريطًا سفليًا، مما يعزز تجربة المستخدم على شاشات الجوال.

*   **ربط قاعدة البيانات:** تم ربط التطبيق بنجاح بقاعدة بيانات PostgreSQL باستخدام خدمة NeonDB. هذا يوفر حلاً سحابيًا قويًا وموثوقًا لتخزين البيانات المساحية، مما يضمن قابلية التوسع والأداء العالي. تم إعداد متغيرات البيئة اللازمة للاتصال بقاعدة البيانات (DATABASE_URL, PGDATABASE, PGHOST, PGPORT, PGUSER, PGPASSWORD)، مما يسهل عملية الاتصال وإدارة البيانات.

*   **التكامل مع Git:** يتم استخدام نظام التحكم في الإصدارات Git بشكل فعال لإدارة الكود المصدري للمشروع. هذا يضمن سير عمل تطوير منظم، حيث يتم تتبع التغييرات، وتسهيل التعاون بين المطورين، وإمكانية العودة إلى إصدارات سابقة عند الحاجة. عمليات المزامنة (Pull و Push) تتم بانتظام لضمان تحديث المستودع المركزي.

*   **البنية التقنية الحالية:** يعتمد التطبيق على بيئة Node.js مع إطار عمل Express.js للواجهة الخلفية (API) و React.js للواجهة الأمامية. يتم استخدام Vite كأداة بناء سريعة للواجهة الأمامية، و Framer Motion لإضافة حركات وتأثيرات بصرية سلسة للواجهة. هذا المزيج التقني يوفر بيئة تطوير حديثة وفعالة.

*   **فصل الواجهات:** تم اتخاذ قرار استراتيجي بإنشاء ملف `clean-field-app.tsx` جديد للواجهة الميدانية المحسنة بدلاً من التعديل على الملف الأصلي. هذا النهج يتبع أفضل الممارسات في تطوير البرمجيات، حيث يسمح بتطوير واجهة جديدة بشكل مستقل دون التأثير على الواجهة القديمة العاملة، مما يقلل من المخاطر ويسهل عملية الاختبار والتطوير. بمجرد اكتمال الواجهة الجديدة واختبارها، يمكن استبدال الواجهة القديمة بها بسلاسة.

هذه الإنجازات تمثل خطوات حاسمة نحو تحقيق رؤية منصة "بنّاء اليمن" الرقمية، وتوفر أساسًا متينًا للخطة الاستراتيجية التفصيلية التالية.



### 3.3. دمج المتطلبات من المناقشات السابقة:

بالإضافة إلى الوثائق الرسمية، تم الأخذ في الاعتبار المتطلبات والتوضيحات التي نشأت خلال مناقشاتنا السابقة، والتي تشمل:

*   **ربط قاعدة بيانات Supabase:** تم التأكيد على استخدام Supabase كخيار مفضل لقاعدة البيانات، مما يعني الاستفادة من ميزاتها مثل PostgreSQL، المصادقة، التخزين، والوظائف (Functions) لتبسيط عملية التطوير وتوفير حل متكامل. هذا يؤثر على تصميم البنية التحتية للبيانات وطبقة الـ API.
*   **تطوير تطبيق الجوال:** التركيز على تطوير تطبيق جوال للمساحين يستقبل الطلبات من الإدارة ويبدأ أعمال الرفع المساحي. هذا يتطلب واجهات مستخدم مخصصة للجوال، وقدرات على العمل دون اتصال بالإنترنت (Offline Sync)، وإمكانيات قوية للتعامل مع البيانات الجغرافية.
*   **تطوير واجهة الإدارة:** الحاجة إلى واجهة إدارية تمكن الإدارة من تعيين الطلبات للمساحين، ومتابعة تقدم العمل، وإدارة المستخدمين والأدوار. هذه الواجهة ستكون حاسمة لسير العمل الإداري.
*   **تطوير واجهة مقدم الطلب:** ضرورة وجود بوابة لمقدمي الطلبات لتقديم طلباتهم وتتبع حالتها، مما يكمل دورة حياة الطلب.
*   **تحسين الأداء:** التركيز على تحسين أداء التطبيق بشكل عام، خاصة فيما يتعلق بالتعامل مع البيانات الكبيرة والمعقدة، وضمان استجابة سريعة للواجهات.
*   **المرونة وقابلية التوسع:** تصميم النظام ليكون مرنًا وقابلًا للتوسع لاستيعاب النمو المستقبلي في عدد المستخدمين والخدمات.

## 4. الخطة الاستراتيجية الشاملة والمفصلة للغاية

تستند هذه الخطة إلى دمج جميع الإنجازات الحالية، والمتطلبات المستخلصة من "دليل استخدام خدمة إصدار قرار مساحي" [1] و "لائحة قانون التخطيط الحضري" [2]، بالإضافة إلى المتطلبات التي تم تحديدها خلال مناقشاتنا. الهدف هو بناء نظام بيئي رقمي متكامل يغطي جميع جوانب عملية المسح العقاري والتخطيط الحضري في اليمن.

### المرحلة 1: تعزيز البنية التحتية وإدارة البيانات (الأساس المتين)

**الهدف:** إنشاء بنية تحتية قوية وموثوقة لإدارة جميع أنواع البيانات، مع التركيز على البيانات الجغرافية، وضمان أمانها وقابليتها للتوسع.

**المهام الفرعية:**

*   **1.1. تطوير قاعدة البيانات الشاملة (PostgreSQL/Supabase):**
    *   **1.1.1. تصميم نموذج البيانات العلائقي (ERD):** بناء نموذج بيانات شامل يمثل جميع الكيانات والعلاقات بدقة. هذا يشمل:
        *   **المستخدمون:** (ID, الاسم، البريد الإلكتروني، كلمة المرور، الدور (مقدم طلب، مساح، مدير، موظف خدمة عملاء)، معلومات الاتصال).
        *   **الطلبات:** (ID, نوع الطلب، حالة الطلب، تاريخ التقديم، تاريخ الانتهاء المتوقع، معرف مقدم الطلب، معرف المساح المعين، الغرض من القرار المساحي، نوع الوثيقة، مساحة الأرض، ملاحظات).
        *   **المواقع الجغرافية:** (ID, معرف الطلب، نوع الشكل الهندسي (نقطة، خط، مضلع)، الإحداثيات (باستخدام PostGIS Geometry/Geography types)، معلومات إضافية مثل العزلة، القطاع، وحدة الجوار، رقم المخطط).
        *   **المرفقات:** (ID, معرف الطلب/المستخدم، نوع المرفق (صورة صك، هوية، إلخ)، مسار التخزين، تاريخ الرفع).
        *   **التكليفات:** (ID, معرف الطلب، معرف المساح، تاريخ التكليف، حالة التكليف، ملاحظات الإدارة).
        *   **اشتراطات البناء:** (ID, معرف الموقع، الارتدادات (أمامي، خلفي، جانبي)، عدد الطوابق المسموح بها، نسبة البناء، الأنشطة المسموح بها).
        *   **سجل الأنشطة:** (ID, معرف المستخدم، نوع النشاط، تاريخ النشاط، تفاصيل النشاط).
    *   **1.1.2. تنفيذ جداول قاعدة البيانات (Schema Implementation) على Supabase:** إنشاء الجداول والعلاقات المحددة في نموذج البيانات باستخدام Supabase، مع الاستفادة من ميزات Supabase المدمجة مثل Row Level Security (RLS) لتعزيز الأمان.
    *   **1.1.3. تحسين أداء قاعدة البيانات (Performance Optimization):**
        *   تطبيق الفهارس (Indexes) على الأعمدة المستخدمة بشكل متكرر في الاستعلامات (مثل معرفات المستخدمين، معرفات الطلبات، الإحداثيات الجغرافية).
        *   تحسين الاستعلامات الجغرافية باستخدام PostGIS لضمان سرعة البحث والتحليل المكاني.
        *   مراقبة أداء قاعدة البيانات بشكل مستمر وتعديل الإعدادات حسب الحاجة.
    *   **1.1.4. إدارة البيانات الجغرافية المتقدمة (Advanced Geospatial Data Management):**
        *   تفعيل امتداد PostGIS في قاعدة البيانات لدعم أنواع البيانات الجغرافية والوظائف المكانية.
        *   تطوير وظائف قاعدة البيانات (Database Functions) لاستيراد وتحليل ملفات Shapefile وتحويلها إلى صيغ قابلة للتخزين في PostgreSQL.
        *   تطبيق آليات للتحقق من صحة البيانات الجغرافية (مثل التحقق من تداخل المضلعات، صحة الإحداثيات).

*   **1.2. تطوير واجهة برمجة التطبيقات (API) للبيانات باستخدام Node.js/Express:**
    *   **1.2.1. تصميم نقاط النهاية (RESTful Endpoints):** إنشاء مجموعة شاملة من نقاط النهاية الآمنة والفعالة التي تغطي جميع العمليات المطلوبة:
        *   `POST /api/auth/register`: لتسجيل المستخدمين الجدد.
        *   `POST /api/auth/login`: لتسجيل دخول المستخدمين.
        *   `GET /api/users/{id}`: لجلب معلومات المستخدم.
        *   `GET /api/requests`: لجلب جميع الطلبات (مع إمكانية التصفية حسب الدور والحالة).
        *   `POST /api/requests`: لتقديم طلب جديد.
        *   `GET /api/requests/{id}`: لجلب تفاصيل طلب معين.
        *   `PUT /api/requests/{id}/status`: لتحديث حالة الطلب.
        *   `POST /api/requests/{id}/assign`: لتعيين مساح لطلب.
        *   `GET /api/requests/{id}/locations`: لجلب المواقع الجغرافية المرتبطة بطلب.
        *   `POST /api/requests/{id}/locations`: لإضافة موقع جغرافي لطلب (دعم النقاط، الخطوط، المضلعات).
        *   `POST /api/requests/{id}/attachments`: لرفع المرفقات.
        *   `GET /api/requests/{id}/attachments`: لجلب المرفقات.
        *   `GET /api/surveyors/{id}/assignments`: لجلب التكليفات الخاصة بمساح معين.
        *   `POST /api/surveyors/{id}/shapefile`: لرفع ملف Shapefile من المساح.
        *   `GET /api/admin/dashboard-stats`: لجلب إحصائيات لوحة تحكم الإدارة.
        *   `GET /api/surveyor/dashboard-stats`: لجلب إحصائيات لوحة تحكم المساح.
    *   **1.2.2. تطبيق منطق الأعمال (Business Logic) المعقد:** دمج جميع القواعد والإجراءات المستخلصة من "دليل استخدام خدمة إصدار قرار مساحي" [1] و "لائحة قانون التخطيط الحضري" [2] في طبقة API. هذا يشمل:
        *   التحقق من صحة البيانات المدخلة في كل مرحلة من مراحل الطلب.
        *   إدارة الانتقالات بين حالات الطلب (مثال: لا يمكن الانتقال من "معلق" إلى "مكتمل" دون رفع جميع المرفقات المطلوبة).
        *   إنشاء التكليفات تلقائيًا عند وصول الطلب إلى مرحلة معينة.
        *   حساب الأبعاد والمساحات تلقائيًا عند تحديد الحدود الجغرافية.
        *   تطبيق قواعد اشتراطات البناء بناءً على نوع المنطقة والمخطط.
    *   **1.2.3. المصادقة والتفويض (Authentication & Authorization) باستخدام JWT:**
        *   تنفيذ نظام مصادقة قائم على رموز JSON Web Tokens (JWT) لضمان أمان الاتصالات.
        *   تطبيق آليات تفويض دقيقة (Role-Based Access Control - RBAC) لضمان أن كل مستخدم يمكنه الوصول فقط إلى الموارد والوظائف المسموح بها لدوره (مثال: المساح لا يمكنه تعيين طلبات، والمدير لا يمكنه رفع ملفات مساحية).
    *   **1.2.4. معالجة الأخطاء والتسجيل (Error Handling & Logging):** تنفيذ نظام شامل لمعالجة الأخطاء وتسجيلها لضمان استقرار النظام وسهولة تتبع المشكلات.

### المرحلة 2: تطوير واجهات المستخدم وتجربة المستخدم (UX/UI) المتكاملة

**الهدف:** بناء واجهات مستخدم بديهية، جذابة، ومستجيبة تلبي احتياجات جميع أنواع المستخدمين (مقدمي الطلبات، المساحين، الإدارة، موظفي خدمة العملاء) وتوفر تجربة مستخدم سلسة وفعالة.

**المهام الفرعية:**

*   **2.1. تطوير واجهة الإدارة (Admin Dashboard) الشاملة:**
    *   **2.1.1. لوحة تحكم شاملة وتفاعلية:** تصميم وتنفيذ لوحة تحكم مركزية للمسؤولين ومديري الأقسام. ستعرض هذه اللوحة رسومًا بيانية ومؤشرات أداء رئيسية (KPIs) حول:
        *   عدد الطلبات حسب الحالة (جديد، قيد المعالجة، مكتمل، مرفوض).
        *   أداء المساحين (عدد التكليفات المكتملة، متوسط وقت الإنجاز).
        *   توزيع الطلبات جغرافيًا.
        *   ملخصات مالية (الرسوم المحصلة).
    *   **2.1.2. نظام إدارة الطلبات المتقدم:** واجهة متكاملة لإدارة دورة حياة الطلبات بالكامل، مع إمكانية:
        *   عرض جميع الطلبات مع خيارات تصفية وبحث متقدمة (حسب التاريخ، الحالة، المساح، نوع الطلب).
        *   تغيير حالة الطلب (تأكيد السداد، مصادقة خدمة الجمهور، إشعار مدير القسم، إلخ) وفقًا لـ "دليل استخدام خدمة إصدار قرار مساحي" [1].
        *   تعيين الطلبات للمساحين المتاحين.
        *   عرض تفاصيل كل طلب بشكل مفصل، بما في ذلك بيانات مقدم الطلب، الموقع الجغرافي، المرفقات، وسجل الأنشطة.
        *   إضافة ملاحظات داخلية للطلبات.
    *   **2.1.3. إدارة المستخدمين والأدوار والصلاحيات (RBAC):** واجهة لإدارة حسابات جميع المستخدمين في النظام. هذا يشمل:
        *   إنشاء، تعديل، وحذف حسابات المستخدمين.
        *   تعيين الأدوار المختلفة (مدير، مساح، موظف خدمة عملاء، مقدم طلب) لكل مستخدم.
        *   تحديد الصلاحيات الدقيقة لكل دور (مثال: موظف خدمة العملاء يمكنه مصادقة الطلبات، لكن لا يمكنه تعيين مساحين).
        *   مراجعة سجلات الأنشطة لكل مستخدم.
    *   **2.1.4. إدارة التكليفات والمساحين:** واجهة مخصصة لمديري الأقسام لإنشاء وتعيين التكليفات للمساحين، مع إمكانية:
        *   عرض التكليفات المعلقة والمكتملة.
        *   تتبع موقع المساحين في الوقت الفعلي (إذا كان متاحًا ومسموحًا به).
        *   تقييم أداء المساحين بناءً على إنجاز التكليفات.
    *   **2.1.5. إدارة المرفقات والوثائق:** واجهة مركزية لعرض، تحميل، وتنزيل جميع المرفقات والوثائق المتعلقة بالطلبات والمستخدمين.

*   **2.2. تحسين وتوسيع تطبيق المساح الميداني (Mobile Field App) - React Native/Expo:**
    *   **2.2.1. واجهة تسجيل الدخول الآمنة:** تنفيذ واجهة تسجيل دخول سهلة الاستخدام وآمنة للمساحين، مع دعم المصادقة الثنائية (2FA) إذا لزم الأمر.
    *   **2.2.2. قائمة التكليفات الذكية:** واجهة لعرض قائمة بالتكليفات المعينة للمساح، مع إمكانية:
        *   تصفية التكليفات حسب الحالة (جديد، قيد التنفيذ، مكتمل).
        *   عرض تفاصيل كل تكليف (معرف الطلب، نوع الطلب، الموقع، المرفقات، ملاحظات الإدارة).
        *   قبول أو رفض التكليف.
    *   **2.2.3. واجهة المسح الميداني التفاعلية والمتقدمة:** تطوير الواجهة الحالية لتكون مركزًا لعمليات المسح الميداني، وتشمل:
        *   **عرض الخرائط التفاعلية:** دمج خرائط تفاعلية (مثل Google Maps API أو Mapbox) لعرض الموقع الحالي للمساح، والمواقع الجغرافية للطلبات، والمخططات التنظيمية.
        *   **استيراد وعرض ملفات Shapefile:** دعم استيراد ملفات Shapefile مباشرة في التطبيق وعرضها على الخريطة، مع إمكانية تراكبها مع خرائط الأساس [1].
        *   **أدوات الرسم والتحرير الجغرافية:** توفير مجموعة غنية من الأدوات لرسم وتعديل الكيانات الجغرافية (النقاط، الخطوط، المضلعات) بدقة عالية. هذا يشمل:
            *   أدوات التقاط النقاط (Point Capture) باستخدام GPS أو الإدخال اليدوي.
            *   أدوات رسم الخطوط والمضلعات (Line & Polygon Drawing) مع دعم أدوات الالتقاط (Snapping Tools) لضمان الدقة.
            *   أدوات التعديل (Edit Tools) مثل التحريك، التدوير، التحجيم، والتقسيم.
            *   دعم تحديد الأبعاد والحدود تلقائيًا بناءً على الأشكال الهندسية المرسومة [1].
        *   **إدخال اشتراطات البناء الذكية:** واجهة مبسطة لإدخال اشتراطات البناء بناءً على الموقع والمخطط التنظيمي. يمكن أن تتضمن:
            *   قوائم منسدلة أو حقول إدخال للارتدادات، عدد الطوابق، نسبة البناء، والأنشطة المسموح بها.
            *   التحقق من صحة المدخلات بناءً على اللوائح [2].
        *   **التقاط الإحداثيات الدقيقة من أجهزة GNSS:** دمج وظيفة لالتقاط الإحداثيات الدقيقة مباشرة من أجهزة GNSS المتصلة (عبر Bluetooth أو USB) وتخزينها مع الطلب [1].
        *   **إدارة المرفقات الميدانية:** إمكانية التقاط الصور ومقاطع الفيديو من الموقع ورفعها مباشرة إلى الطلب، بالإضافة إلى رفع مستندات أخرى.
        *   **سجل الأنشطة الميدانية:** تسجيل جميع الأنشطة التي يقوم بها المساح في الميدان (مثل بدء المسح، التقاط نقطة، رفع ملف) لضمان الشفافية والمحاسبة.
    *   **2.2.4. التزامن دون اتصال (Offline Sync) للبيانات:** تمكين المساحين من تنزيل بيانات التكليفات والخرائط الأساسية للعمل دون اتصال بالإنترنت في المناطق التي لا تتوفر فيها شبكة. عند استعادة الاتصال، يتم مزامنة البيانات التي تم جمعها تلقائيًا مع الخادم.
    *   **2.2.5. تحسين الأداء وتجربة المستخدم:** التركيز على سرعة الاستجابة، سلاسة الواجهة، وتقليل استهلاك البطارية.

*   **2.3. تطوير واجهة مقدم الطلب (Applicant Portal) - React/Next.js:**
    *   **2.3.1. تسجيل الدخول/التسجيل الآمن:** واجهة سهلة الاستخدام لمقدمي الطلبات لإنشاء حساباتهم وتسجيل الدخول.
    *   **2.3.2. تقديم الطلبات الموجه:** واجهة خطوة بخطوة لتقديم طلبات القرار المساحي، مع توجيه واضح للمستخدم في كل مرحلة:
        *   تعبئة بيانات مقدم الطلب (مع إمكانية جلب البيانات من الهوية الوطنية إذا توفر التكامل) [1].
        *   تحديد الغرض من القرار المساحي، نوع الوثيقة، ومساحة الأرض [1].
        *   تحديد الموقع الجغرافي على الخريطة (مع دعم البحث عن العنوان أو الإحداثيات التقريبية) [1].
        *   رفع المرفقات المطلوبة (مثل صور الصكوك، الهوية) [1].
        *   مراجعة وتأكيد الطلب.
    *   **2.3.3. تتبع حالة الطلب في الوقت الفعلي:** واجهة تمكن مقدم الطلب من تتبع حالة طلبه في كل مرحلة من مراحل دورة الحياة (قيد المراجعة، تم تعيين مساح، قيد المسح، مكتمل، إلخ).
    *   **2.3.4. الفواتير والسداد:** واجهة لعرض الفواتير المستحقة، وتفاصيل الرسوم، وإرشادات السداد، مع إمكانية الدفع الإلكتروني (إذا تم دمج بوابة دفع).
    *   **2.3.5. سجل الطلبات:** عرض جميع الطلبات السابقة التي قدمها المستخدم.

### المرحلة 3: التكاملات والإشعارات والتقارير (الربط والشفافية)

**الهدف:** ربط المنصة بالأنظمة الخارجية ذات الصلة، وتوفير قنوات اتصال فعالة، وإنشاء تقارير تحليلية لدعم اتخاذ القرار.

**المهام الفرعية:**

*   **3.1. التكامل مع أنظمة الدفع الإلكتروني:**
    *   **3.1.1. دمج بوابة دفع إلكترونية:** ربط المنصة ببوابة دفع محلية أو دولية لتسهيل سداد رسوم الخدمات بشكل آمن ومباشر.
    *   **3.1.2. آلية تأكيد السداد التلقائي:** تطوير نظام لتأكيد السداد تلقائيًا وتحديث حالة الطلب في قاعدة البيانات فور إتمام عملية الدفع.

*   **3.2. نظام الإشعارات الشامل:**
    *   **3.2.1. إشعارات داخل التطبيق (In-App Notifications):** نظام إشعارات للمستخدمين (مقدمي الطلبات، المساحين، المديرين) حول تحديثات حالة الطلب، التكليفات الجديدة، الملاحظات، إلخ. يتم عرضها داخل واجهة المستخدم.
    *   **3.2.2. إشعارات SMS/البريد الإلكتروني:** إرسال إشعارات خارجية تلقائية عبر الرسائل النصية القصيرة (SMS) والبريد الإلكتروني للمستخدمين في نقاط رئيسية من دورة حياة الطلب (مثال: "تم استلام طلبك بنجاح"، "تم تعيين مساح لطلبك"، "القرار المساحي جاهز للاستلام") [1].
    *   **3.2.3. إشعارات دفع (Push Notifications):** (للتطبيقات الأصلية) إرسال إشعارات دفع فورية لتنبيه المستخدمين بأهم التحديثات حتى لو كان التطبيق مغلقًا.

*   **3.3. التكامل مع أنظمة خارجية (مستقبلًا - التوسع الاستراتيجي):**
    *   **3.3.1. أنظمة GIS/CAD الحكومية:** تكامل أعمق مع أنظمة نظم المعلومات الجغرافية (GIS) والتصميم بمساعدة الحاسوب (CAD) المستخدمة من قبل الجهات الحكومية لتبادل البيانات المساحية والمخططات بشكل سلس، مما يقلل من الازدواجية ويزيد من دقة البيانات.
    *   **3.3.2. أنظمة التخطيط الحضري والجهات ذات الصلة:** ربط المنصة بأنظمة أخرى ذات صلة بالتخطيط الحضري (مثل أنظمة التراخيص، أنظمة البناء) لتبادل البيانات القانونية والمخططات، بما يتماشى مع "لائحة قانون التخطيط الحضري" [2].
    *   **3.3.3. أنظمة الهوية الوطنية:** (إذا كان ممكنًا) التكامل مع نظام الهوية الوطنية لجلب بيانات مقدمي الطلبات تلقائيًا وتبسيط عملية التسجيل والتحقق [1].

*   **3.4. نظام التقارير والتحليلات:**
    *   **3.4.1. تقارير أداء المساحين:** تقارير مفصلة عن أداء كل مساح (عدد الطلبات المكتملة، متوسط وقت الإنجاز، جودة البيانات).
    *   **3.4.2. تقارير حالة الطلبات:** تقارير عن توزيع الطلبات حسب الحالة، النوع، والمنطقة الجغرافية.
    *   **3.4.3. تقارير مالية:** تقارير عن الرسوم المحصلة، والمدفوعات المعلقة.
    *   **3.4.4. لوحات معلومات (Dashboards) تحليلية:** لوحات معلومات تفاعلية للمديرين لعرض المؤشرات الرئيسية واتخاذ القرارات الاستراتيجية.

### المرحلة 4: الاختبار، النشر، والصيانة المستمرة (ضمان الجودة والاستمرارية)

**الهدف:** ضمان جودة النظام، نشره بشكل فعال، وصيانته المستمرة لضمان استقراره وأدائه الأمثل.

**المهام الفرعية:**

*   **4.1. الاختبار الشامل والمتعدد المستويات:**
    *   **4.1.1. اختبار الوحدة (Unit Testing):** كتابة اختبارات آلية لكل مكون برمجي (Functions, Components) لضمان عملها بشكل صحيح بمعزل عن باقي النظام.
    *   **4.1.2. اختبار التكامل (Integration Testing):** اختبار تفاعل المكونات المختلفة مع بعضها البعض (مثال: اختبار تدفق البيانات من الواجهة الأمامية إلى الـ API إلى قاعدة البيانات).
    *   **4.1.3. اختبار النظام (System Testing):** اختبار النظام ككل لضمان تلبية جميع المتطلبات الوظيفية وغير الوظيفية (مثل الأداء، الأمان، قابلية الاستخدام).
    *   **4.1.4. اختبار الأداء (Performance Testing):** محاكاة أحمال المستخدمين لاختبار استجابة النظام تحت الضغط وتحديد نقاط الاختناق.
    *   **4.1.5. اختبار الأمان (Security Testing):** إجراء اختبارات اختراق (Penetration Testing) وفحص الثغرات الأمنية لضمان حماية البيانات والمعلومات الحساسة.
    *   **4.1.6. اختبار القبول من المستخدم (User Acceptance Testing - UAT):** إشراك المستخدمين النهائيين (مقدمي الطلبات، المساحين، المديرين، موظفي خدمة العملاء) في اختبار النظام للتأكد من أنه يلبي احتياجاتهم وتوقعاتهم في بيئة واقعية.

*   **4.2. النشر (Deployment) الآلي والمستمر:**
    *   **4.2.1. إعداد بيئة الإنتاج (Production Environment):** تهيئة خوادم الإنتاج وقواعد البيانات والخدمات السحابية (مثل Supabase) لضمان بيئة مستقرة وآمنة للنشر.
    *   **4.2.2. إعداد خطوط أنابيب التكامل المستمر والنشر المستمر (CI/CD Pipelines):** أتمتة عملية بناء، اختبار، ونشر الكود. هذا يضمن نشر التغييرات بسرعة وكفاءة مع تقليل الأخطاء البشرية.
    *   **4.2.3. استراتيجية النشر (Deployment Strategy):** تحديد استراتيجية النشر المناسبة (مثل Blue/Green Deployment أو Canary Deployment) لضمان عدم انقطاع الخدمة أثناء التحديثات.

*   **4.3. الصيانة والدعم المستمر:**
    *   **4.3.1. المراقبة الشاملة (Comprehensive Monitoring):** تنفيذ أدوات مراقبة لأداء النظام (CPU, Memory, Network, Database Queries) وتحديد المشكلات المحتملة بشكل استباقي.
    *   **4.3.2. إدارة السجلات (Logging Management):** جمع وتحليل سجلات النظام لتتبع الأخطاء، سلوك المستخدمين، وأداء التطبيق.
    *   **4.3.3. التحديثات الدورية:** إصدار تحديثات منتظمة لإصلاح الأخطاء، تحسين الأداء، وإضافة ميزات جديدة بناءً على ملاحظات المستخدمين والمتطلبات المتغيرة.
    *   **4.3.4. الدعم الفني للمستخدمين:** توفير قنوات دعم فني فعالة للمستخدمين (مثل نظام تذاكر الدعم، قاعدة معرفية، دعم عبر الهاتف) لحل المشكلات والاستفسارات بسرعة.
    *   **4.3.5. النسخ الاحتياطي والاستعادة (Backup & Recovery):** تنفيذ سياسات نسخ احتياطي دورية للبيانات وضمان القدرة على استعادة النظام في حالة الكوارث.

## 5. الجدول الزمني المقترح (تقديري ومفصل)

هذا الجدول الزمني تقديري ويمكن تعديله بناءً على توفر الموارد وتعقيد المهام. يعتمد على العمل المتوازي حيثما أمكن.

| المرحلة | المهمة الفرعية | المدة المقترحة (أسابيع) | الملاحظات |
|---|---|---|---|
| **المرحلة 1: البنية التحتية وإدارة البيانات** | | **6-8 أسابيع** | | 
| | 1.1.1. تصميم نموذج البيانات العلائقي (ERD) | 1 | يتطلب تعاونًا وثيقًا مع أصحاب المصلحة |
| | 1.1.2. تنفيذ جداول قاعدة البيانات على Supabase | 2 | يشمل إعداد RLS |
| | 1.1.3. تحسين أداء قاعدة البيانات | 1 | مستمر خلال التطوير |
| | 1.1.4. إدارة البيانات الجغرافية المتقدمة | 2 | يتطلب خبرة في PostGIS |
| | 1.2.1. تصميم نقاط النهاية (RESTful Endpoints) | 2 | متوازي مع 1.1.1 و 1.1.2 |
| | 1.2.2. تطبيق منطق الأعمال المعقد | 3 | مستمر خلال التطوير، يعتمد على 1.1.1 |
| | 1.2.3. المصادقة والتفويض (JWT/RBAC) | 2 | أساسي للأمان |
| | 1.2.4. معالجة الأخطاء والتسجيل | 1 | مستمر خلال التطوير |
| **المرحلة 2: تطوير واجهات المستخدم وتجربة المستخدم** | | **10-14 أسبوعًا** | يمكن العمل على الواجهات بالتوازي |
| | 2.1.1. لوحة تحكم شاملة وتفاعلية (Admin) | 3 | يعتمد على 1.2.1 و 1.2.2 |
| | 2.1.2. نظام إدارة الطلبات المتقدم (Admin) | 4 | يعتمد على 1.2.1 و 1.2.2 |
| | 2.1.3. إدارة المستخدمين والأدوار والصلاحيات (Admin) | 3 | يعتمد على 1.2.3 |
| | 2.1.4. إدارة التكليفات والمساحين (Admin) | 3 | يعتمد على 1.2.1 و 1.2.2 |
| | 2.1.5. إدارة المرفقات والوثائق (Admin) | 2 | يعتمد على 1.2.1 |
| | 2.2.1. واجهة تسجيل الدخول الآمنة (Mobile) | 1 | أساسي للمساحين |
| | 2.2.2. قائمة التكليفات الذكية (Mobile) | 2 | يعتمد على 1.2.1 |
| | 2.2.3. واجهة المسح الميداني التفاعلية والمتقدمة (Mobile) | 6 | الجزء الأكثر تعقيدًا، يتطلب خبرة GIS |
| | 2.2.4. التزامن دون اتصال (Offline Sync) (Mobile) | 3 | مهم للعمل الميداني |
| | 2.2.5. تحسين الأداء وتجربة المستخدم (Mobile) | 2 | مستمر خلال التطوير |
| | 2.3.1. تسجيل الدخول/التسجيل الآمن (Applicant) | 1 | أساسي لمقدمي الطلبات |
| | 2.3.2. تقديم الطلبات الموجه (Applicant) | 3 | يعتمد على 1.2.1 و 1.2.2 |
| | 2.3.3. تتبع حالة الطلب في الوقت الفعلي (Applicant) | 2 | يعتمد على 1.2.1 |
| | 2.3.4. الفواتير والسداد (Applicant) | 2 | يعتمد على 1.2.1 |
| | 2.3.5. سجل الطلبات (Applicant) | 1 | يعتمد على 1.2.1 |
| **المرحلة 3: التكاملات والإشعارات والتقارير** | | **4-6 أسابيع** | | 
| | 3.1.1. دمج بوابة دفع إلكترونية | 2 | يتطلب اختيار بوابة دفع |
| | 3.1.2. آلية تأكيد السداد التلقائي | 1 | يعتمد على 3.1.1 |
| | 3.2.1. إشعارات داخل التطبيق | 1 | مستمر خلال تطوير الواجهات |
| | 3.2.2. إشعارات SMS/البريد الإلكتروني | 2 | يتطلب مزود خدمة SMS/Email |
| | 3.2.3. إشعارات دفع (Push Notifications) | 2 | (للتطبيقات الأصلية) |
| | 3.3.1. أنظمة GIS/CAD الحكومية (مستقبلًا) | (تقديري) | يتطلب تنسيقًا مع الجهات الحكومية |
| | 3.3.2. أنظمة التخطيط الحضري والجهات ذات الصلة (مستقبلًا) | (تقديري) | يتطلب تنسيقًا مع الجهات الحكومية |
| | 3.3.3. أنظمة الهوية الوطنية (مستقبلًا) | (تقديري) | يتطلب تنسيقًا مع الجهات الحكومية |
| | 3.4.1. تقارير أداء المساحين | 2 | يعتمد على 1.1.1 و 1.2.2 |
| | 3.4.2. تقارير حالة الطلبات | 1 | يعتمد على 1.1.1 و 1.2.2 |
| | 3.4.3. تقارير مالية | 1 | يعتمد على 1.1.1 و 1.2.2 |
| | 3.4.4. لوحات معلومات (Dashboards) تحليلية | 2 | يعتمد على جميع التقارير |
| **المرحلة 4: الاختبار، النشر، والصيانة المستمرة** | | **3-4 أسابيع** | مستمر خلال جميع المراحل |
| | 4.1.1. اختبار الوحدة (Unit Testing) | مستمر | يبدأ مع كل مهمة تطوير |
| | 4.1.2. اختبار التكامل (Integration Testing) | مستمر | يبدأ مع كل مهمة تطوير |
| | 4.1.3. اختبار النظام (System Testing) | 2 | بعد اكتمال الميزات الرئيسية |
| | 4.1.4. اختبار الأداء (Performance Testing) | 1 | بعد اكتمال الميزات الرئيسية |
| | 4.1.5. اختبار الأمان (Security Testing) | 1 | بعد اكتمال الميزات الرئيسية |
| | 4.1.6. اختبار القبول من المستخدم (UAT) | 2 | إشراك المستخدمين النهائيين |
| | 4.2.1. إعداد بيئة الإنتاج | 1 | قبل النشر |
| | 4.2.2. إعداد خطوط أنابيب CI/CD | 2 | مستمر |
| | 4.2.3. استراتيجية النشر | 1 | قبل النشر |
| | 4.3.1. المراقبة الشاملة | مستمر | بعد النشر |
| | 4.3.2. إدارة السجلات | مستمر | بعد النشر |
| | 4.3.3. التحديثات الدورية | مستمر | بعد النشر |
| | 4.3.4. الدعم الفني للمستخدمين | مستمر | بعد النشر |
| | 4.3.5. النسخ الاحتياطي والاستعادة | مستمر | بعد النشر |

**إجمالي الوقت المقدر للمراحل الأساسية (1-4):** 23-32 أسبوعًا (حوالي 5.5 - 8 أشهر).

## 6. الموارد المطلوبة (تفصيلية)

*   **فريق التطوير:**
    *   **مدير مشروع/قائد فريق:** (1) مسؤول عن التخطيط، التنسيق، والمتابعة.
    *   **مطور واجهة خلفية (Backend Developers):** (2-3) متخصصون في Node.js/Express، تصميم API، إدارة قواعد البيانات (PostgreSQL/Supabase)، المصادقة والتفويض، ومنطق الأعمال.
    *   **مطور واجهة أمامية (Frontend Developers):** (2-3) متخصصون في React/Next.js لتطوير واجهات الويب (Admin Dashboard, Applicant Portal).
    *   **مطور تطبيقات جوال (Mobile Developers):** (2-3) متخصصون في React Native/Expo لتطوير تطبيق المساح الميداني، مع خبرة في التعامل مع الخرائط والبيانات الجغرافية (PostGIS).
    *   **مهندس قواعد بيانات/GIS Specialist:** (1) متخصص في تصميم وتحسين قواعد البيانات الجغرافية (PostGIS)، ومعالجة البيانات المساحية (Shapefile).
    *   **مصمم UX/UI:** (1) مسؤول عن تصميم تجربة المستخدم وواجهات المستخدم لجميع المنصات، وضمان الاتساق البصري وسهولة الاستخدام.
    *   **مهندس DevOps:** (1) مسؤول عن إعداد بيئات التطوير والإنتاج، خطوط CI/CD، المراقبة، والنشر.
    *   **مهندس ضمان الجودة (QA Engineer):** (1-2) مسؤول عن كتابة وتنفيذ خطط الاختبار (الوحدة، التكامل، النظام، الأداء، الأمان، القبول).

*   **الأدوات والتقنيات:**
    *   **الواجهة الخلفية:** Node.js, Express.js, TypeScript.
    *   **قاعدة البيانات:** PostgreSQL (مستضافة على Supabase), PostGIS.
    *   **الواجهة الأمامية (ويب):** React.js, Next.js, TypeScript, Tailwind CSS (أو أي إطار عمل CSS آخر), Framer Motion.
    *   **تطبيق الجوال:** React Native, Expo, React Native Maps (أو مكتبات خرائط أخرى), Redux (أو Context API لإدارة الحالة), Realm (أو SQLite للتخزين المحلي دون اتصال).
    *   **التحكم في الإصدارات:** Git, GitHub/GitLab.
    *   **أدوات CI/CD:** GitHub Actions, GitLab CI/CD, Jenkins (أو ما يعادله).
    *   **أدوات المراقبة والتسجيل:** Prometheus, Grafana, ELK Stack (Elasticsearch, Logstash, Kibana) أو خدمات Supabase المدمجة.
    *   **أدوات التصميم:** Figma, Sketch, Adobe XD.
    *   **أدوات إدارة المشاريع:** Jira, Trello, Asana.

*   **البنية التحتية:**
    *   **خدمات سحابية:** Supabase (لقاعدة البيانات والمصادقة والتخزين والوظائف)، ويمكن استخدام خدمات سحابية إضافية مثل AWS, Google Cloud, Azure لاستضافة الواجهة الخلفية والتطبيقات إذا لزم الأمر.
    *   **شبكة توصيل المحتوى (CDN):** لتحسين سرعة تحميل الأصول الثابتة (الصور، الملفات).
    *   **خدمات الرسائل:** مزود خدمة SMS (مثل Twilio) ومزود خدمة البريد الإلكتروني (مثل SendGrid).

## 7. المخاطر المحتملة والتخفيف (مفصلة)

| المخاطرة | الوصف التفصيلي | استراتيجية التخفيف المقترحة |
|---|---|---|
| **تعقيد البيانات الجغرافية** | التعامل مع أنواع مختلفة من البيانات الجغرافية (نقاط، خطوط، مضلعات)، تحويلات الإحداثيات، وتكامل ملفات Shapefile يمكن أن يكون معقدًا ويؤثر على الأداء والدقة. | - **الاستعانة بخبراء GIS:** ضم متخصصين في نظم المعلومات الجغرافية (GIS) إلى الفريق أو الاستعانة بهم لتقديم المشورة.
- **استخدام PostGIS:** الاستفادة الكاملة من قدرات PostGIS المتقدمة في PostgreSQL لمعالجة البيانات الجغرافية.
- **اختبارات مكثفة:** إجراء اختبارات شاملة للوظائف الجغرافية لضمان الدقة والأداء.
- **توثيق واضح:** توثيق جميع عمليات معالجة البيانات الجغرافية وتحويلاتها. |
| **التوافق مع اللوائح القانونية** | ضمان أن جميع وظائف النظام تتوافق تمامًا مع "دليل استخدام خدمة إصدار قرار مساحي" [1] و "لائحة قانون التخطيط الحضري" [2]، وأي تحديثات مستقبلية لهذه اللوائح. | - **مراجعة قانونية مستمرة:** إشراك مستشار قانوني أو خبير في اللوائح الحكومية لمراجعة سير عمل النظام وميزاته بشكل دوري.
- **تصميم سير عمل مرن:** بناء النظام بسير عمل قابل للتعديل بسهولة لاستيعاب أي تغييرات في اللوائح.
- **التوثيق القانوني:** توثيق كيفية تطبيق كل بند من بنود اللوائح في النظام. |
| **أداء النظام مع زيادة المستخدمين** | قد يواجه النظام تحديات في الأداء (بطء الاستجابة، تعطل) مع زيادة عدد المستخدمين المتزامنين أو حجم البيانات. | - **تحسين أداء قاعدة البيانات:** استخدام الفهارس، تحسين الاستعلامات، وتطوير وظائف قاعدة البيانات الفعالة.
- **قابلية التوسع السحابية:** استخدام خدمات سحابية (مثل Supabase) توفر قابلية التوسع التلقائي (Auto-scaling) للموارد.
- **الموازنة بين الأحمال (Load Balancing):** توزيع حركة المرور على خوادم متعددة.
- **التخزين المؤقت (Caching):** استخدام آليات التخزين المؤقت للبيانات التي يتم الوصول إليها بشكل متكرر.
- **مراقبة الأداء المستمرة:** استخدام أدوات مراقبة الأداء لتحديد نقاط الاختناق ومعالجتها بشكل استباقي. |
| **تحديثات الأجهزة المساحية** | قد تتغير أنواع ومواصفات أجهزة GNSS المستخدمة في الميدان، مما يتطلب تحديثات مستمرة للتطبيق لدعم الأجهزة الجديدة. | - **تصميم API مرن:** بناء واجهة برمجة تطبيقات (API) مرنة تدعم أنواعًا مختلفة من الأجهزة وتنسيقات البيانات.
- **وحدات قابلة للتوصيل (Pluggable Modules):** تصميم وحدات برمجية منفصلة للتعامل مع كل نوع من الأجهزة، مما يسهل إضافة دعم لأجهزة جديدة دون التأثير على باقي النظام.
- **توفير تحديثات منتظمة:** إصدار تحديثات دورية لتطبيق الجوال لدعم الأجهزة الجديدة وإصلاح أي مشكلات توافق. |
| **الأمان وحماية البيانات** | خطر الوصول غير المصرح به، اختراق البيانات، أو فقدان البيانات الحساسة. | - **تطبيق المصادقة والتفويض القوي:** استخدام JWT و RBAC لضمان أن المستخدمين المصرح لهم فقط يمكنهم الوصول إلى البيانات والوظائف.
- **تشفير البيانات:** تشفير البيانات أثناء النقل (SSL/TLS) وأثناء التخزين (Encryption at Rest).
- **فحص الثغرات الأمنية:** إجراء اختبارات أمان دورية (مثل اختبارات الاختراق) لتحديد ومعالجة الثغرات.
- **تدريب المستخدمين:** توعية المستخدمين بأفضل ممارسات الأمان (مثل اختيار كلمات مرور قوية). |
| **التزامن دون اتصال بالإنترنت** | تعقيد إدارة تزامن البيانات بين التطبيق الميداني وقاعدة البيانات الرئيسية عند العمل دون اتصال، وخطر تعارض البيانات. | - **اختيار مكتبات تزامن موثوقة:** استخدام مكتبات أو أطر عمل مصممة خصيصًا للتزامن دون اتصال (مثل Realm Sync أو PouchDB).
- **حل تعارضات البيانات:** تطوير آليات لحل تعارضات البيانات التي قد تحدث عند تزامن التغييرات من مصادر متعددة.
- **اختبارات مكثفة للتزامن:** إجراء اختبارات صارمة لسيناريوهات العمل دون اتصال والتزامن. |

## 8. الخلاصة

تمثل هذه الخطة الاستراتيجية خارطة طريق شاملة ومفصلة للغاية لتطوير منصة "بنّاء اليمن" الرقمية. من خلال دمج الإنجازات الحالية، والمتطلبات المستخلصة من الوثائق القانونية والإجرائية، والمناقشات التفصيلية، تهدف هذه الخطة إلى بناء نظام بيئي رقمي متكامل، آمن، قابل للتوسع، وفعال. الالتزام بهذه الخطة، مع التركيز على الجودة، تجربة المستخدم، والتوافق مع اللوائح، سيضمن تحقيق رؤية "بناء اليمن" الرقمية وتحويل خدمات المسح العقاري والتخطيط الحضري إلى تجربة رقمية سلسة وموثوقة.
