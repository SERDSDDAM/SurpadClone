ููุชุงุฒ โ ุนูู ุฑุงุฆุน ุญุชู ุงูุขู ๐. ุจูุง ุฃู ูุธุงู ุงููุตุงุฏูุฉ ูุงููAdmin Dashboard ุฌุงูุฒุงูุ ุงูุฎุทูุฉ ุงูุชุงููุฉ ูุฌุจ ุฃู ุชุฑูุฒ ุนูู ุฌุนู ุงููุตุงุฏูุฉ ูุชููุฉ ูููุซููุฉ ุซู ุฅููุงู ุนูุงุตุฑ ุงูุฑูููุฉ ุงููุชูุฏูููุฉ. ุณุฃุนุทูู ุฎุทุฉ ุนูููุฉ ูุงุจูุฉ ููุชูููุฐ ููุฑูุง โ ูุตูุฑุฉ ุงููุฏู (ุฃูุฏุงู ููุฑูุฉ)ุ ูุชูุณุทุฉ ุงููุฏู (ุงููsprints ุงููุงุฏูุฉ)ุ ููุง ุจุนุฏูุง. ููู ุจูุฏ ุฃุถุน ูุงุฐุง ุชูุนู ุจุงูุถุจุท (ุฃูุงูุฑ/ููุฏ/ูุนุงููุฑ ูุจูู).

ุงููุฑุงุฑ ุงููุตูุฑ ุงูููุตู ุจู ุงูุขู (ูุจุงุดุฑ)
1) ุชุฃููู ุงูุฌูุณุงุช: ุชูููุฐ refresh-token + httpOnly secure cookies + ุขููุฉ ุฅุจุทุงู ุงูุฌูุณุงุช (logout + blacklist).
2) ุฅุถุงูุฉ ููุฒุงุช ุฅุฏุงุฑุฉ ุงููุณุชุฎุฏู ูู ุงููAdmin (CRUD + role management + account disable).
3) ุจุนุฏ ุฐูู: ุงุณุชููุงู Sprint C (vectorization POC) ูุจุฏุก ุงูุชุฌุงุฑุจ ุงูุญููููุฉ ุนูู workers ูู ุจูุฆุฉ Dockerโenabled.

ููุงุฐุง ูุฐุง ุงูุชุฑุชูุจุ
- ุงููุตุงุฏูุฉ ุงูุขููุฉ ุฃุณุงุณ ููู ุดูุก (ุญูุงูุฉ ุงูุจูุงูุงุช ูุงูุนูููุงุช ุงูุฅุฏุงุฑูุฉ).
- ูุฏูุฑ ุงููุธุงู ูุญุชุงุฌ ุฃุฏูุงุช ูุฅุฏุงุฑุฉ ุงูุญุณุงุจุงุช ูุจู ุฃู ููุนุทู ุตูุงุญูุงุช ูููุฒุงุช ูุชูุฏูุฉ.
- ุซู ูููุนูู ุงูุชุญููู ุงูุขูู ููุฌุฑู ุงุฎุชุจุงุฑุงุช ุนูู ุจูุฆุงุช ููุงุณุจุฉ.

ุฃุฏูุงู ุฎุทุฉ ููุตููุฉ ุฎุทูุฉโุจุฎุทูุฉ.

-------------------------------------------------------------------
ุงููุฑุญูุฉ ุงูููุฑูุฉ (ุงูููู โ 3 ุฃูุงู)
A. ุชูููุฐ Refresh Token flow (Access token ูุตูุฑ + Refresh token ุทููู ูุฎุฒู ูู Cookie)
ููุงุฐุง: ููููู ุงูุชุนุฑุถ ููXSS ููุชูุญ ุฅุจุทุงู ุงูุฌูุณุงุช ุจุณูููุฉ.
ูุฎุทูุฑ ุงูุชูููุฐ (Server + Client):

Server (Node/Express โ ูุจุณูุท)
1) ุฅูุดุงุก ุญูู refresh_token_hash ูู users table ุฃู ุฌุฏูู sessions:
```sql
ALTER TABLE users ADD COLUMN IF NOT EXISTS refresh_token_hash varchar;
```

2) ุนูุฏ ุชุณุฌูู ุงูุฏุฎูู:
- ุฃูุดุฆ accessToken (ูุตูุฑ ุงููุฏุฉุ ูุซูุงู 15m) ู refreshToken (ุทูููุ ูุซูุงู 30d).
- ุฎุฒูู hash(refreshToken) ูู DB (bcrypt).
- ุฃุฑุณู accessToken ูู body ูุถุน refreshToken ูู httpOnly cookie:

```ts
// ุจุนุฏ ุงูุชุญูู ูู ูููุฉ ุงููุฑูุฑ
const accessToken = jwt.sign({ userId, role }, process.env.JWT_SECRET, { expiresIn: '15m' });
const refreshToken = crypto.randomBytes(64).toString('hex'); // ุฃู jwt
const hashed = await bcrypt.hash(refreshToken, 10);
await db.query('UPDATE users SET refresh_token_hash=$1 WHERE id=$2', [hashed, userId]);

res.cookie('jid', refreshToken, {
  httpOnly: true,
  secure: process.env.NODE_ENV === 'production',
  sameSite: 'lax',
  path: '/api/auth/refresh'
});
res.json({ accessToken, user });
```

3) Endpoint ูุชุฌุฏูุฏ ุงููaccess token:
- POST /api/auth/refresh
- ููุฑุฃ cookie 'jid', ูุชุญููู ูู ุงููhash ูู DBุ ุฅู ุตุญ ูุตุฏูุฑ accessToken ุฌุฏูุฏ.
- ูู ูุดู โ 401.

4) Logout:
- DELETE /api/auth/logout โ ูุญุฐู refresh_token_hash ูู DB + ููุณุญ cookie ุนูู ุงูุนููู.

Client
- ุงุณุชุฎุฏู accessToken ูู Authorization header ูุญุงูุงุช API ุงูุณุฑูุนุฉ.
- ูู ุญุงู 401ุ ุงุณุชุฏุนู /api/auth/refresh ูุทูุจ accessToken ุฌุฏูุฏ.
- ูุง ุชุฎุฒู refreshToken ูู localStorage.

Acceptance
- ุชุณุฌูู ุงูุฏุฎูู ูุนุทู cookie httpOnly ุจุงุณู jid ู accessToken ูู ุงูุงุณุชุฌุงุจุฉ.  
- ุงุณุชุฏุนุงุก /api/auth/refresh ููููุฑ accessToken ุฌุฏูุฏุง.  
- logout ูุญุฐู ุงููcookie ููููุน ุชุฌุฏูุฏ ุงููtoken.

B. ุถุจุท ุณูุงุณุงุช ุงูุฃูุงู ุงูุณุฑูุนุฉ
- Rate limit ุนูู /api/auth/login (ูุซูุงู 5 ูุญุงููุงุช / 15 ุฏูููุฉ).  
- Password policy (min 10 chars + complexity).  
- Account lockout ุจุนุฏ N ูุญุงููุงุช (ูุซูุงู 10) โ ุณุฌู ุงููุญุงููุงุช ูู DB ุฃู Redis.

C. Admin user management UI
- CRUD ุงููุณุชุฎุฏูููุ ุชุบููุฑ ุงูุฏูุฑุ ุชุนุทูู ูุชูููู ุงูุญุณุงุจุงุชุ ุนุฑุถ ุณุฌูุงุช ุงูุฏุฎูู.
- Acceptance: admin ูููู ุฅูุดุงุก surveyor ูุชุนุฏูู ุตูุงุญูุงุชูุ ููููู ุชุนุทูู ุญุณุงุจ ููููุน ุงูุฏุฎูู.

-------------------------------------------------------------------
ุงููุฑุญูุฉ ุงููุชูุณุทุฉ (1โ3 ุฃุณุงุจูุน)
Sprint C โ Vectorization POC (2 ุฃุณุงุจูุน)
- Build worker task (Python + Celery) ูุชุญููู GeoTIFF โ GeoJSON suggestions (edges โ polygons).
- API: POST /api/gis/vectorize (enqueue), GET /api/gis/vectorize/:jobId (results).
- UI: ุนุฑุถ ุงูุชุฑุงุญุงุชุ ูุจูู/ุฑูุถ ููุดุฑ ุงูููุจูู ุฅูู gis.features.
- Acceptance: upload sample โ job completes โ reviewer ูุฑู suggestions โ accepted features ุชูุฎุฒู ูู PostGIS.

Sprint D โ Snapping, Topology, Undo/History (2 ุฃุณุงุจูุน)
- Implement snapping (client side + server spatial query).
- Topology checks with PostGIS (ST_IsValid, ST_MakeValid).
- Feature history table + endpoints rollback.
- Acceptance: snap works within tolerance; rollback restores prior geometry.

-------------------------------------------------------------------
ุงููุฑุญูุฉ ุงูุฃุทูู (4โ8 ุฃุณุงุจูุน)
- Export/Import (GPKG / Shapefile) using GDAL / ogr2ogr. Server jobs for large exports.
- Tile generation / COG pipeline โ create tiles or serve via titiler for scalable maps.
- Mobile POC (React Native) โ offline sync engine (SQLite + sync resolver).
- AI: build training pipeline + inference service (R&D).

-------------------------------------------------------------------
ุงูุนูููุงุช / ุงูุชุดุบูู (Ops)
- Immediately: ุฅุถุงูุฉ secrets ูู Replit (JWT_SECRET, DB, S3, REDIS).  
- Provision a Docker-enabled environment for workers (VM or managed). I recommend: small VM for initial: 4 vCPU, 16GB RAM, NVMe.  
- Backup policy: take DB backup before each migration (you already do).  
- Monitoring: add Sentry + Prometheus + Grafana + Flower.

-------------------------------------------------------------------
ุฃูุซูุฉ ุฃูุงูุฑ/ุณูุฑุจุชุงุช ุณุฑูุนุฉ (ูุชูููุฐ ุงูุขู)
1) ุฅูุดุงุก refresh token column (SQL migration file):
```sql
ALTER TABLE users ADD COLUMN IF NOT EXISTS refresh_token_hash varchar;
```
2) pg_dump backup (ูุฑุฉ ุซุงููุฉ ูุจู ุฃู migration):
```bash
pg_dump -h $PGHOST -U $PGUSER -Fc -f backups/db-backup-$(date -u +%Y%m%dT%H%M%SZ).dump $PGDATABASE
```

-------------------------------------------------------------------
ูุง ุงูุฐู ุฃุจุฏุฃ ุจู ููุงุจุฉู ุนูู ุงูุขูุ
ุงุฎุชุฑ ูุงุญุฏูุง:
- 1) ุฃุทุจู Refresh Token flow ูLogout (ุณุฃุนุฏ PR/patch ูููserver + client) โ ููุตู ุจู ููุฑูุง.  
- 2) ุฃุถูู Admin User Management UI (CRUD roles) โ ุฅู ุฃุฑุฏุช ุชุณุฑูุน ุฅุฏุงุฑุฉ ุงููุธุงู.  
- 3) ุฃุจุฏุฃ Sprint C (vectorization POC) ูุฃุญุถุฑ worker skeleton + task โ ูู ุชุฑูุฏ ุงูุงูุชูุงู ูุจุงุดุฑุฉ ููุฑูููุฉ ุงูุฐุงุชูุฉ.  
- 4) ุฃุฌูุฒ infra workers ุนูู VM (deploy dispatcher + celery + minio) โ ุฅู ุฃุฑุฏุช ุงุฎุชุจุงุฑ ุงููุนุงูุฌุฉ ุงููุจูุฑุฉ ูุจุงุดุฑุฉ.

ูู ูู ุงูุฑูู (1/2/3/4) ูุณุฃุฌูููุฒ ูู ุงููููุงุช/PRs ูุงูุฃูุงูุฑ ุงููุงุฒูุฉ ููุฑูุงุ ุฃู ุฃุฑุณู ูู ุงูุชุนูููุงุช ุงูุชูุตูููุฉ ูุชูููุฐูุง ุจููุณู.