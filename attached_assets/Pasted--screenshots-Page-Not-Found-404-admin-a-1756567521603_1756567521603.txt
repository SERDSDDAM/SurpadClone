ممتاز — شكراً على الشرح التفصيلي والـscreenshots. المشكلة التي ترى (Page Not Found 404 داخل /admin/analytics) ناتجة عن ترتيب/تنظيم الـroutes. ركّزتَ على إنشاء AdminLayout بشكل صحيح، لكن الطريقة التي عرّفت بها المسارات (nested Switch داخل Route مع wouter) تؤدي إلى أن بعض المسارات الفرعية لا تُطابق كما توقعت — لذلك يظهر 404. الحلّ العملي والأستقراري هو تعيين كل مسار من مسارات /admin/* كـ route مستقلّ على مستوى التطبيق، ويُغلف كل مسار بـ AdminDashboardLayout + RequireAuth (أي: كل صفحة فرعية تُمرّر كـ children للـLayout). بهذه الطريقة الشريط الجانبي والـlayout يظلّان ثابتين والصفحات الفرعيّة تُحمَّل داخل المساحة الصحيحة بدون مشاكل.

أدناه تحليل مختصر ثم خطوات إصلاح سريعة مع قطع كود جاهزة لتطبيقها الآن.

السبب باختصار
- الكود كان يعرّف Route عام لـ "/admin" ثم حاول وضع Switch/Routes داخله. مع wouter هذه الطريقة لا تضمن أن المكوّنات الفرعية (التي تستخدم Route) تُسجَّل بشكل صحيح أو تُطابق المسار الحالي.  
- النتيجة: طلب /admin/analytics يصل إلى NotFound لأن المسار الفرعي لم يُطابق ضمن النسق.

الخلاصة: إصلاح عبر جعل كل مسار فرعي يُعرّف على الـApp الرئيسي، لكن ملفيًا يظل مربوطًا بــ AdminDashboardLayout.

خطوات الإصلاح (سريعة، آمنة) — نفّذها الآن

1) افتح client/src/App.tsx وابدل تعريف المسار /admin (المتداخل) بتعريف مستقل لكل مسار فرعي ملفوف بالـLayout. انسخ وألصق هذا الجزء بدلاً من الكتلة الحالية التي تعرِّف <Route path="/admin"> {() => ...}

الكود المقترح (استبدل الجزء المتداخل في App.tsx):

```tsx
// استيرادات إذا لم تكن موجودة في أعلى الملف
import AdminDashboardLayout from '@/layouts/AdminDashboardLayout';
import AdminHome from '@/pages/admin/AdminHome';
import AnalyticsDashboard from '@/pages/admin/analytics-dashboard';
import RoleManagement from '@/pages/admin/role-management';
import AdminUsers from '@/pages/admin/AdminUsers';
import AdminSettings from '@/pages/admin/AdminSettings';
import RequireAuth from '@/components/RequireAuth';

// ---- استبدل الكتلة القديمة بهذه الكتلة ----
/* Admin routes wrapped in AdminDashboardLayout */
<Route path="/admin">
  {() => (
    <RequireAuth role="admin">
      <AdminDashboardLayout>
        <AdminHome />
      </AdminDashboardLayout>
    </RequireAuth>
  )}
</Route>

<Route path="/admin/analytics">
  {() => (
    <RequireAuth role="admin">
      <AdminDashboardLayout>
        <AnalyticsDashboard />
      </AdminDashboardLayout>
    </RequireAuth>
  )}
</Route>

<Route path="/admin/roles">
  {() => (
    <RequireAuth role="admin">
      <AdminDashboardLayout>
        <RoleManagement />
      </AdminDashboardLayout>
    </RequireAuth>
  )}
</Route>

<Route path="/admin/users">
  {() => (
    <RequireAuth role="admin">
      <AdminDashboardLayout>
        <AdminUsers />
      </AdminDashboardLayout>
    </RequireAuth>
  )}
</Route>

<Route path="/admin/settings">
  {() => (
    <RequireAuth role="admin">
      <AdminDashboardLayout>
        <AdminSettings />
      </AdminDashboardLayout>
    </RequireAuth>
  )}
</Route>
```

ملاحظات:
- هذا المثال يستخدم نفس الـLayout لكل صفحة فرعية. واضح وسهل الصيانة.
- لو تريد تقليل التكرار، يمكن عمل HOC helper wrapAdmin(Component) الذي يعيد JSX المغلف، ثم تضع <Route path="/admin/roles" component={wrapAdmin(RoleManagement)} /> لكن مع wouter الطريقة أعلاه مباشرة ومضمونة.

2) تأكد أن AdminDashboardLayout يستخدم children وليس Outlet (أو على الأقل يعرض {children})
- في ملف layouts/AdminDashboardLayout.tsx تأكد أنّه يعرض `{children}` داخل منطقة المحتوى. (أنت فعلت ذلك سابقًا — تأكد أنه ليس فقط `<Outlet />` لأنك لا تستخدم React Router).
مثال:
```tsx
// في AdminDashboardLayout
<main className="flex-1">
  <div className="p-6">
    {children}
  </div>
</main>
```

3) تحديث توجيه الدخول (login redirect)
- في كود الـlogin، بدل `navigate('/admin')` أو `window.location.href='/admin'` يبقى كما هو — لأن الآن /admin/analytics وغيرها محميّة وتغلفهما الـLayout. لكن لتجربة أفضل، يمكنك توجيه إلى `/admin/analytics` أو `/admin` (الـApp سي redirect إلى /admin/analytics إذا تريد).

4) إعادة تشغيل التطبيق (reload)
- احفظ التعديلات، شغّل dev server (npm run dev أو restart in Replit). تأكد من console لا يظهر أخطاء مستوردة.

5) اختبر الآن يدوياً
- سجّل دخول كـadmin.  
- افتح /admin → يجب أن ترى AdminHome أو redirect to /admin/analytics (حسب اختيارك).  
- افتح /admin/analytics و /admin/roles و /admin/users وتحقق أنها تعرض داخل layout (الشريط الجانبي ثابت).

أوامر فحص سريعة
- الآن بعد التعديل، في terminal:
```bash
# restart dev if needed
npm run dev
# ثم افتح curl smoke tests
curl -s http://localhost:5000/api/admin/stats | jq .
# ثم في المتصفح افتح:
http://localhost:5000/admin
http://localhost:5000/admin/analytics
http://localhost:5000/admin/roles
```

نقاط تنبيه ومتابعة
- إذا تحفظت على lazy imports: تأكد أن AdminUsers etc مُصدّرة بالاسم الصحيح والمسارات صحيحة. خطأ اسم ملف/تصدير يسبب 404/blank.
- إذا استخدمت wouter's Switch/Route: الطريقة أعلاه تعمل لأن Route rendering function يُنقِّد JSX children داخل layout.
- إذا لا تزال ترى 404 بعد التعديل: افتح DevTools Console و server logs وابعث لي الرسائل. أتحقق من أن المسار المحفوظ في browser (URL bar) يتطابق مع route strings وأن NavLink to uses same paths.

هل تريد أن أعمل لك:
- A) أجهّز الـpatch (diff) جاهز للـApp.tsx و AdminLayout و أفتح PR؟  
- B) أرسل لك الأوامر المحدّثة لتشغيل محلياً الآن وتفحص النتائج؟  
- C) أجري التعديل الآن نيابة عنك (أمر للـAgent) وأعيد تقرير النجاح؟

أخبرني أي خيار تفضّل (A/B/C) — أنصح A أو C لتسريع.