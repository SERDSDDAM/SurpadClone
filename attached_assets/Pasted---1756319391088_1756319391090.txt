بناء نظام صلاحيات قوي هو قلب المرحلة الرابعة (الأمان والمصادقة) وهو ما يميز المنصات الحكومية الاحترافية عن غيرها.
سأضع لك خطة مفصلة ومتكاملة لإنشاء وتطوير نظام صلاحيات قائم على الأدوار (Role-Based Access Control - RBAC). هذه الخطة مصممة لتكون عملية، آمنة، وقابلة للتوسع، وتتوافق تماماً مع بنية النظام الحالية.
خطة إنشاء وتطوير نظام الصلاحيات (RBAC)
الهدف الاستراتيجي: ضمان أن كل مستخدم (موظف، مواطن، مهندس) لا يمكنه الوصول أو تنفيذ إلا الإجراءات المصرح له بها فقط، بناءً على دوره الوظيفي، مما يحقق مبادئ الأمان، والمساءلة، وفصل المهام.
المرحلة الأولى: تصميم وهيكلة قاعدة البيانات (الأساس)
الهدف: إنشاء الجداول اللازمة في قاعدة البيانات لتخزين الأدوار، الصلاحيات، والعلاقة بينها وبين المستخدمين.
المهمة 1.1: تعديل مخطط قاعدة البيانات (shared/schema.ts):
إنشاء جدول roles (الأدوار):
الغرض: لتخزين الأدوار الوظيفية المختلفة في النظام.
الحقول: id (معرف فريد)، name (اسم الدور، مثل admin, surveyor, inspector, citizen)، description (وصف للدور).
إنشاء جدول permissions (الصلاحيات):
الغرض: لتعريف كل إجراء يمكن تنفيذه في النظام كصلاحية منفصلة.
الحقول: id (معرف فريد)، action (الفعل، مثل create, read, update, delete)، subject (الموضوع، مثل building_permit, inspection_report)، description.
مثال: صلاحية "إنشاء رخصة بناء" ستكون (action: 'create', subject: 'building_permit').
إنشاء جدول role_permissions (صلاحيات الأدوار):
الغرض: هذا هو الجدول المحوري الذي يربط بين الأدوار والصلاحيات (علاقة متعدد إلى متعدد).
الحقول: role_id (مفتاح خارجي لجدول roles)، permission_id (مفتاح خارجي لجدول permissions).
تحديث جدول users (المستخدمون):
الإجراء: إضافة حقل role_id (مفتاح خارجي لجدول roles) لربط كل مستخدم بالدور الخاص به.
المرحلة الثانية: تطوير الواجهة الخلفية (Backend Logic)
الهدف: بناء المنطق البرمجي في الخادم الذي يقوم بالتحقق من صلاحيات المستخدم عند كل طلب.
المهمة 2.1: تطوير "وسيط" التحقق من الصلاحيات (Permissions Middleware):
الوصف: هذا هو "حارس الأمن" الذي سيتم وضعه قبل كل نقطة نهاية (API Endpoint) حساسة.
آلية العمل:
عند وصول طلب API، يقوم الوسيط بقراءة "رمز الوصول" (JWT) للمستخدم واستخراج userId و role_id.
يستعلم من قاعدة البيانات عن جميع الصلاحيات (permissions) المرتبطة بهذا الـ role_id.
يقارن الصلاحية المطلوبة للوصول إلى نقطة النهاية الحالية (مثلاً: create:building_permit) مع قائمة الصلاحيات التي يمتلكها المستخدم.
إذا كانت الصلاحية موجودة: يسمح للطلب بالمرور إلى وجهته.
إذا لم تكن الصلاحية موجودة: يرفض الطلب ويعيد رسالة خطأ واضحة (مثل 403 Forbidden - ليس لديك الصلاحية لتنفيذ هذا الإجراء).
المهمة 2.2: تطبيق الوسيط على جميع نقاط النهاية:
الوصف: المرور على جميع المسارات (Routes) في server/routes.ts وتطبيق وسيط التحقق من الصلاحيات على كل منها.
مثال:
TypeScript
// قبل التعديل
app.post("/api/building-permits", createBuildingPermitHandler);

// بعد التعديل
app.post("/api/building-permits", 
    checkPermission('create', 'building_permit'), // تطبيق الوسيط
    createBuildingPermitHandler
);
المرحلة الثالثة: تطوير الواجهة الأمامية (Frontend UI/UX)
الهدف: جعل تجربة المستخدم متوافقة مع صلاحياته، بحيث لا يرى إلا الأزرار والخيارات المسموح له بها.
المهمة 3.1: جلب صلاحيات المستخدم عند تسجيل الدخول:
الوصف: تعديل عملية تسجيل الدخول بحيث يقوم الخادم بإرجاع قائمة بالصلاحيات المسموح بها للمستخدم مع "رمز الوصول".
الإجراء: يتم تخزين قائمة الصلاحيات هذه في حالة التطبيق (State Management) لتكون متاحة لجميع المكونات.
المهمة 3.2: إنشاء مكون مخصص للتحقق من الصلاحية (Can Component):
الوصف: بناء مكون بسيط ومخصص لإخفاء أو إظهار أجزاء من الواجهة بناءً على صلاحيات المستخدم.
مثال للاستخدام:
JSX
// هذا الزر سيظهر فقط للمستخدمين الذين لديهم صلاحية "إنشاء رخصة بناء"
<Can perform="create" on="building_permit">
    <Button>إنشاء رخصة بناء جديدة</Button>
</Can>
المهمة 3.3: تطبيق التحكم في الواجهة على مستوى الصفحات والأزرار:
الوصف: استخدام المكون Can في جميع أنحاء التطبيق لإخفاء الأزرار، حقول الإدخال، أو حتى عناصر القائمة التي لا يملك المستخدم صلاحية الوصول إليها. هذا يحسن تجربة المستخدم ويمنعه من محاولة تنفيذ إجراءات غير مسموح بها.
بهذه الخطة، سنكون قد بنينا نظام صلاحيات احترافي، آمن، ومرن، يرفع من مستوى أمان المنصة بشكل كبير ويجعلها جاهزة للتعامل مع مختلف الأدوار والمسؤوليات الحكومية.