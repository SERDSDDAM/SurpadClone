ممتاز، الكود الذي أرفقته هو نسخة متقدمة من أداة رقمنة جغرافية مبنية على React و Leaflet، مع دعم رفع ملفات GeoTIFF مضغوطة، إدارة الطبقات، وعرضها على الخريطة.

### ملاحظات عامة:
- لديك نظام رفع ملفات متكامل مع دعم ZIP ورفع إلى API `/api/gis/upload-geotiff-zip`.
- يتم استرجاع بيانات الطبقة من الخادم وتخزينها محلياً.
- عرض الطبقات يتم عبر `<ImageOverlay>` مع `bounds` صحيحة.
- لديك واجهة لإدارة الطبقات (إظهار/إخفاء، حذف، شفافية).
- الخريطة تستخدم OpenStreetMap كطبقة أساس.
- عرض إحداثيات الماوس يعمل بشكل جيد.
- أدوات الرسم موجودة (نقاط، خطوط، مضلعات) مع اختيار الأداة.
- أزرار لإعادة تعيين العرض وإظهار/إخفاء الطبقات.

---

### توصيات لتحسين العرض وحل المشاكل المتبقية:

#### 1. **تأكد من صحة `bounds` للطبقات**
- تحقق أن `bounds` هي مصفوفة من إحداثيات جغرافية صحيحة (مثلاً: `[[southWestLat, southWestLng], [northEastLat, northEastLng]]`).
- إذا كانت الإحداثيات خاطئة أو خارج نطاق الخريطة، لن تظهر الطبقة.
- يمكن إضافة `console.log(layer.bounds)` قبل عرض الطبقة للتأكد.

#### 2. **تفعيل التكبير التلقائي عند إضافة طبقة جديدة**
- عند إضافة طبقة جديدة، قم باستدعاء `map.fitBounds(layer.bounds)` لتكبير الخريطة تلقائياً على الطبقة.
- مثال داخل `useEffect` عند تحديث `layers`:
  ```tsx
  useEffect(() => {
    if (layers.length === 0) return;
    const map = mapRef.current;
    if (!map) return;
    const visibleLayers = layers.filter(l => l.visible && l.bounds);
    if (visibleLayers.length > 0) {
      const groupBounds = L.latLngBounds([]);
      visibleLayers.forEach(layer => {
        groupBounds.extend(layer.bounds);
      });
      map.fitBounds(groupBounds);
    }
  }, [layers]);
  ```

#### 3. **تفعيل التكبير/التصغير بعجلة الماوس**
- `MapContainer` من `react-leaflet` يدعم ذلك افتراضياً، تأكد أن خاصية `scrollWheelZoom` مفعلة:
  ```tsx
  <MapContainer
    center={[15.3694, 44.1910]}
    zoom={8}
    scrollWheelZoom={true}
    ...
  >
  ```
- إذا لم تعمل، تحقق من عدم وجود CSS أو JS يمنع التمرير.

#### 4. **إضافة خريطة أساسية صور الأقمار الصناعية (Satellite Basemap)**
- يمكنك تفعيل طبقة صور الأقمار الصناعية من Esri أو Google:
  ```tsx
  <TileLayer
    url="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"
    attribution='&copy; Esri'
    maxZoom={19}
  />
  ```
- يمكن إضافة زر لتبديل بين طبقة OSM وطبقة الأقمار الصناعية.

#### 5. **تطوير أداة القص (Clipping Tool)**
- تحتاج إلى إضافة أداة رسم مضلع (Polygon) يمكن تعديل رؤوسه (vertices).
- بعد رسم المضلع، يتم تطبيق `mask` أو `clip` على طبقة الصورة لعرض الجزء داخل المضلع فقط.
- Leaflet لا يدعم قص الصور مباشرة، لكن يمكن استخدام مكتبات مثل `leaflet-maskcanvas` أو رسم طبقة جديدة باستخدام Canvas.
- البدء بإضافة زر لتفعيل وضع الرسم، ثم تخزين المضلع، ثم تطبيق القص.

#### 6. **تحسين عرض الإحداثيات**
- حالياً تعرض الإحداثيات بالدرجات (Lat/Lng).
- إذا كنت تستخدم نظام إحداثيات مسقط (UTM)، يمكنك تحويل الإحداثيات باستخدام مكتبة `proj4` وعرضها.
- إضافة زر للتبديل بين عرض Lat/Lng و UTM.

---

### خطوات عملية مقترحة للمتابعة:

1. **تأكد من صحة `bounds` في بيانات الطبقة**، وأضف `console.log` للتحقق.
2. **أضف `map.fitBounds` عند إضافة طبقة جديدة** لتكبير الخريطة تلقائياً.
3. **تأكد من تفعيل `scrollWheelZoom` في `MapContainer`**.
4. **أضف طبقة صور الأقمار الصناعية كخيار في الخريطة**.
5. **ابدأ بتطوير أداة القص:**
   - أضف زر لتفعيل رسم مضلع.
   - استخدم `react-leaflet-draw` أو مكتبة مشابهة.
   - بعد رسم المضلع، طبق القص على طبقة الصورة (يمكن البدء بإخفاء الأجزاء خارج المضلع).
6. **أضف خيار عرض الإحداثيات بنظام UTM باستخدام `proj4`**.

---

### خلاصة

الكود الحالي متقدم وجيد، لكن تحتاج إلى:

- التأكد من صحة إحداثيات الطبقات.
- تحسين تجربة المستخدم بتكبير تلقائي، تكبير/تصغير بعجلة الماوس، وخريطة أساسية صور الأقمار الصناعية.
- تطوير أداة القص لتسهيل التعامل مع تداخل الطبقات.
- تحسين عرض الإحداثيات لتدعم نظام UTM.

هل تريدني أساعدك في كتابة كود محدد لأي من هذه النقاط؟