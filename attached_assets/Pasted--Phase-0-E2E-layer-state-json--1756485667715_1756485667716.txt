ููุชุงุฒ โ ูุจุฑูู ุฅูุฌุงุฒ Phase 0 ๐. ุจูุง ุฃูู ุงุฎุชุจุงุฑุงุช E2E ูุฌุญุช ูุญุงูุฉ ุงููlayer-state.json ูุณุชูุฑุฉุ ุฃูุตู ุจูุงูุจุฏุก ููุฑุงู ูู Phase 1 ููุง ูุฑุฑุช. ุฃุฏูุงู ุฎุทุฉ ุชูููุฐูุฉ ุนูููุฉ ููุจุงุดุฑุฉ ูุจุฏุก Phase 1 ุงูุขูุ ูุน ูุญูุต ูุง ูุจู ุงูุงูุทูุงูุ ุฎุทูุงุช ุชูููุฐูุฉ ููุตููุฉุ ุชุณูุณู PRs/ููุงูุ ุชูุฏูุฑุงุช ุฒูููุฉุ ููุชุทูุจุงุช (ุฃุณุฑุงุฑ/ุจูุฆุฉ). ูู ุงูููุงูุฉ ุฃุณุฃูู ุนู ูุฑุงุฑ ูุงุญุฏ ุจุณูุท ููู ุฃุจุฏุฃ ุงูุชูููุฐ ุงูุนููู (ุฃูุชุญ PRs ูุฃุฑูุน ุงููููุงุช ุฅูู ุงูุฑูุจู).

1) ุชุฃููุฏ ุณุฑูุน ูุจู ุงูุงูุทูุงู (pre-checks โ ูุฌุจ ุฃู ุชููู ูููุง ุฌุงูุฒุฉ)
- Phase 0 ุซุงุจุช: ุฌููุน ุงุฎุชุจุงุฑุงุช E2E ุชูุฑุ metadata.json ู layer-state.json ูุชูููุฑุงู ููู ุทุจูุฉ.
- MinIO dev ููุนุฏ ุฃู ูุนูู ุฅุนุฏุงุฏุงุชู (endpoint, accessKey, secretKey).
- ุญุณุงุจ S3 / ููุงุชูุญ AWS (ูุจูุฆุฉ ุงูุฅูุชุงุฌ ูุงุญููุง) ุฌุงูุฒุฉ ุฃู ูุฑุงุฑ ุชุฃุฌูู ุฅุฏุฎุงู ููุงุชูุญ ุฅูู ูุฑุญูุฉ ุงููุดุฑ.
- ูุงุนุฏุฉ ุจูุงูุงุช Postgres + PostGIS ูุชุงุญุฉ ูู dev/staging.
- ูููู ุงููุฑูู ุญู ุงููุตูู ูุฑุงุจุท ุงูุฑูุจู/CI ุฅู ุฃุฑุฏุช PRs ูุจุงุดุฑุฉ.

ุฅุฐุง ูู ูุง ุณุจู ุฌุงูุฒ โ ูุจุฏุฃ Phase 1.

2) ูุฏู Phase 1 (ูุญุฏูุฏ)
ุฅูุดุงุก pipeline ูุนุงูุฌุฉ ููุชูุฌุฉ ููุงุจูุฉ ููุชูุณููุน ุจุญูุซ:
- ุฑูุน ุงููููุงุช โ ุฅูุฏุงุน job ูู ุตู (Celery + Redis) โ workers (Python/GDAL) ุชูุนุงูุฌ ุงูููู ุฅูู COG/PNG + metadata.json โ ุฑูุน ุงููุชุงุฆุฌ ุฅูู MinIO/S3 โ ุชุณุฌูู metadata ูู DB โ ุชุญุฏูุซ layer-state.json ู layerStates ูู API โ ุฅุนูุงู ุงููุงุฌูุฉ (WebSocket / polling).

3) ุงูุฎูุทูุงุช ุงูุชูููุฐูุฉ ุงูููุฑูุฉ (ูุน ูุฎุฑุฌุงุช ููู ุฎุทูุฉ + ุชูุฏูุฑ ุฒููู)
ุฃูุชุฑุญ ุชูููุฐ ูุฐู ุงูุฎุทูุงุช ุจุชุฑุชูุจู ุนูููุ ูุน ุนูู ูุชูุงุฒู ุจูู DevOps ูPython/Node:

A โ ุฅุนุฏุงุฏ ุงูุจููุฉ ุงูุฃุณุงุณูุฉ (Dev) โ Docker Compose (0.5โ1 ููู)
- ูุฎุฑุฌุงุช: docker-compose.yml ูุญุชูู ุนูู postgres(+postgis), redis, minio, api, dispatcher, worker, optional: flower.
- ููุงุฐุง: ุจูุฆุฉ ุชุทููุฑ ูุชูุงููุฉ ูุงุจูุฉ ูุชุดุบูู ูุญูู/CI.
- ุณุฃูููุฑ ููููุง ุฌุงูุฒูุง ูุฃูุชุญ PR: `infra/docker-compose.phase1.yml`.

B โ ุฅุนุฏุงุฏ Worker Image + Celery config (1โ2 ุฃูุงู)
- ูุฎุฑุฌุงุช:
  - worker/Dockerfile ูุจูู ุนูู ุตูุฑุฉ GDAL ุซุงุจุชุฉ (ูุซูุงู osgeo/gdal ุฃู conda image) ูุน rasterio, boto3, celery ูุซุจุชุฉ.
  - celeryconfig.py ู tasks.py (ุนูููุฉ process_layer ููุง ูู ุงูุชุตููู).
- ููุงุท ูููุฉ: ุถุจุท concurrency (ุจุฏุกุงู ุจู 2) ู retry policy ูDLQ handling.

C โ Dispatcher (FastAPI ุตุบูุฑ) ููุงุฌูุฉ enqueue (0.5โ1 ููู)
- ูุฎุฑุฌุงุช: ุฎุฏูุฉ ุจุณูุทุฉ ุชุชููู ุทูุจุงุช enqueue ูู Node (HTTP) ูุชุฏุนู Celery task โ ุชุฑุฌุน jobId.
- ุณุจุจ: ุชุณููู ุงูุนุฒู ุจูู Node ูCeleryุ ูุฅููุงููุฉ ูุถุน auth ุนูู dispatcher.

D โ ุชุนุฏููุงุช Node API (upload endpoint) โ Integration (1โ2 ุฃูุงู)
- ูุฎุฑุฌุงุช:
  - ุจุฏูุงู ูู spawn ูุจุงุดุฑุฉุ Node ูููุงุฏู dispatcher ูุฅูุฏุงุน jobุ ููุฑุฌุน layerId + jobId.
  - ุฅุถุงูุฉ GET /api/jobs/:jobId endpoint ูุนุฑุถ ุญุงูุฉ ุงููููุฉ.
  - DB migration: ุฌุฏูู `gis.layers` ู `gis.jobs` (ุงุฎุชูุงุฑู) ููุชุชุจุน.
- ููุงุญุธุฉ: ูุญุชูุธ ุจุงููุณุงุฑ ุงููุฏูู ููfallback ุฅู ูุฒู.

E โ COG/tiles POC (1โ2 ุฃูุงู)
- ูุฎุฑุฌุงุช:
  - Worker ูุญููู GeoTIFF โ COG (gdal_translate -co TILED=YES -co COPY_SRC_OVERVIEWS=YES -co COMPRESS=DEFLATE).
  - (ุงุฎุชูุงุฑู) ุฅูุดุงุก tiles via gdal2tiles ุฃู ุฅุนุฏุงุฏ titiler/rio-tiler ูุงุญููุง.
- ูุฏู: ุชุฃููุฏ ุฃู COGs ุชุนูู ูุชููุฏูู ุนุจุฑ MinIO.

F โ ุฑูุน ุงููุชุงุฆุฌ + ุชุญุฏูุซ DB + layer-state.json (0.5โ1 ููู)
- ูุฎุฑุฌุงุช:
  - Worker ูุฑูุน processed files ุฅูู MinIO (boto3).
  - Worker ูุฏุฑุฌ/ูุญุฏูุซ ุตู ุงูุณุฌู ูู gis.layers (image_url, leaflet_bounds, metadata JSON).
  - Node ููุญุฏูุซ layerStates ูู DB ุฃู ูู ูุฑุงุกุฉ layer-state.json.

G โ UI polling/WebSocket (0.5โ1 ููู)
- ูุฎุฑุฌุงุช:
  - Frontend ูุนุฑุถ ุญุงูุฉ job (pending/processing/done/error) ุงูุจุณูุทุฉ.
  - ุนูุฏ done โ ูุทูุจ ุจูุงูุงุช ุงูุทุจูุฉ ูู Node ูููุถูู overlay ุชููุงุฆูุงู ุฃู ูุธูุฑ ุฒุฑ "ุนุฑุถ".

H โ ูุฑุงูุจุฉ ูููุงููุณ (0.5โ1 ููู)
- ูุฎุฑุฌุงุช:
  - ุชุดุบูู Flower ุฃู ุฅุถุงูุฉ basic metrics (job durations) ู logs.
  - ุฅุนุฏุงุฏ ุชูุจูู ุจุณูุท ุนูุฏ ูุดู ูุชูุฑุฑ.

ุงูุชูุฏูุฑ ุงูููู ูููPhase1 MVP: 5โ8 ุฃูุงู ุนูู ูุนูุงู (ูููู ุชุณุฑูุน ุจุงูุชูุงุฒู ุนูุฏูุง ูุชููุฑ 2 ูุทูุฑ + ูููุฏุณ DevOps).

4) PRs / ูููุงุช ุณุฃุฌูุฒ ููุฑูุง (ูุงุฆูุฉ ูุฑุฌูุญุฉ โ ุฃุจุฏุฃ ุจูุง ุนูุฏ ููุงููุชู)
- PR-01: infra/docker-compose.phase1.yml (postgres+redis+minio+api+worker+dispatcher)
- PR-02: worker/Dockerfile + requirements.txt + celeryconfig.py + tasks.py (process_layer task)
- PR-03: dispatcher service (FastAPI) + docs (enqueue API)
- PR-04: node-api changes (upload endpoint calls dispatcher + GET /api/jobs/:jobId + DB migrations)
- PR-05: COG conversion POC script + sample command
- PR-06: frontend small changes (job polling UI + show/hide processed)
- PR-07: monitoring: Flower + basic Prometheus exporter (optional)

5) ูุชุทูุจุงุช ุงููุตูู / ุฃุณุฑุงุฑ (ุฃุญุชุงุฌูุง ููู ุฃู ุชุนูููุงุช ูุชุฎุฒูููุง ูู env)
- MINIO_ENDPOINT, MINIO_ACCESS_KEY, MINIO_SECRET_KEY (for dev)
- S3 bucket (prod) credentials when ready (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
- REDIS_URL
- DATABASE_URL (Postgres/PostGIS)
- Container registry access (optional) ุฅุฐุง ุฃุฑุฏูุง ุฑูุน images

6) ุงุฎุชุจุงุฑ Phase1 โ ุงุฎุชุจุงุฑุงุช E2E ููุชุฑุญุฉ
- Upload small zip โ Node returns layerId + jobId.
- Poll jobId โ queued โ processing โ done.
- Verify MinIO contains COG/processed.png.
- GET /api/gis/layers/:layerId shows valid imageUrl and leaflet_bounds.
- Frontend loads overlay from MinIO S3_URL and displays it at correct bounds.
- Simulate worker failure โ job retried โ on repeated failures job marked failed and admin notified.

7) ูุฑุงุฑ ูุทููุจ ุงูุขู
ูู ุฃุจุฏุฃ ููุฑุงู ุจู:
- (A) ุชุฌููุฒ ูุฑูุน PRs ุงููุฑุญูุฉ ุงูุฃููู (infra + worker + dispatcher + Node integration) ูุฃูุชุญูุง ูู ุงูุฑูุจู ูููreviewุ โ ุณุฃุจุฏุฃ ุนูู ูุฐุง ููุฑูุง ุนูุฏ ููุงููุชู.
- ุฃู (B) ุชุฑูุฏู ุฃู ููููุฐ ุงููุฑูู ุงููDevOps ุฏุงุฎูููุง ุจุญุณุจ ุงููุณุชูุฏ ุงูุฐู ุฃูุฏููู (ุฃุฌููุฒ ูููุงุช infra + docs ููุท)ุ

ุฃูุง ููุตู ุจู (A) ูุฃู ุฐูู ูุณุฑูุน ุงูุชุณููู ููุถูู ุชูุงูู ูุจุงุดุฑ ุนูู ุงูุฑูุจู. ูููู ุชุฎุชุงุฑ (A) ุฃู (B) โ ูุฅุฐุง (A) ุฃุจุฏุฃ ููุฑูุง ุจุฅูุดุงุก ุฃูู PR: docker-compose + worker Dockerfile + tasks.py ู dispatcher skeleton. ููุง ุฃุฐูุฑ: ุนูุฏ ุงูููุงููุฉุ ุฃุญุชุงุฌ ููุงุชูุญ MINIO/REDIS/DATABASE ูู env (ุฃู ุฃูุถุญ ููููุฉ ุชุดุบูู ูุญูููุง ุจุฏูู ููุงุชูุญ).

ูู ุฃุจุฏุฃ ุงูุขู (A) ู ุฃูุชุญ PR-01ุ