تحليل شامل ودقيق للمشكلة:
الواجهة الخلفية (Backend - enhanced-upload.ts):
المشكلة: عند معالجة الملف، تقوم الواجهة الخلفية بتعيين حدود جغرافية ثابتة (actualBounds) تغطي اليمن بالكامل ([[12.0, 42.0], [19.0, 54.0]]).
النتيجة: هذا يعني أن كل صورة يتم رفعها، بغض النظر عن موقعها الحقيقي، يتم إجبارها على التمدد لتغطي مساحة اليمن بأكملها. هذا هو سبب عدم رؤيتك للصورة؛ فهي موجودة، لكنها شفافة جداً لأنها ممتدة على مساحة شاسعة.
سكربت المعالجة (Python - zip-processor.py):
المشكلة: السكربت يقوم بعمل رائع في استخراج الصورة وتحويلها، ولكنه لا يقوم بإرجاع الحدود الجغرافية الحقيقية (bounds) المستخرجة من ملف GeoTIFF إلى الواجهة الخلفية (Node.js).
النتيجة: الواجهة الخلفية لا تستلم الحدود الصحيحة، فتضطر لاستخدام الحدود الثابتة التي تغطي اليمن بالكامل.
الواجهة الأمامية (Frontend - SimpleDigitizationTool.tsx):
المشكلة: الواجهة الأمامية مصممة بشكل ممتاز. هي تستقبل البيانات من الخادم وتستخدمها كما هي. المشكلة ليست هنا، بل في البيانات الخاطئة التي تصلها من الخادم.
النتيجة: الواجهة الأمامية تحاول عرض صورة على امتداد اليمن كله، مما يجعلها غير مرئية.
الاستنتاج النهائي:
المشكلة عبارة عن حلقة مفرغة من البيانات الخاطئة: سكربت المعالجة لا يرسل الحدود الصحيحة، والواجهة الخلفية تستخدم حدوداً خاطئة، والواجهة الأمامية تعرض هذه الحدود الخاطئة.
الخطة النهائية لإصلاح المشكلة (دقيقة وموجهة):
لحل هذه المشكلة بشكل نهائي، يجب أن نضمن تدفق البيانات الجغرافية الصحيحة من سكربت المعالجة إلى الواجهة الأمامية.
المهمة الأولى: إصلاح سكربت المعالجة (zip-processor.py)
الهدف: جعل السكربت يقرأ الحدود الجغرافية الصحيحة من ملف GeoTIFF ويرجعها كجزء من نتيجة JSON.
المطلوب:
تعديل process_geotiff: داخل دالة process_geotiff في ملف zip-processor.py، تأكد من أن الكائن result الذي يتم إرجاعه يحتوي على الحدود الصحيحة المستخرجة من rasterio.
طباعة النتيجة: تأكد من أن السطر الأخير في السكربت يطبع النتيجة النهائية بصيغة JSON إلى stdout باستخدام print(json.dumps(result)). يجب أن تبدو النتيجة هكذا:
JSON
{
    "success": true,
    "output_image": "processed.png",
    "bounds_wgs84": [[15.2, 44.0], [15.6, 44.4]], // <-- الأهم
    "width": 800,
    "height": 600,
    "crs": "EPSG:4326"
}
المهمة الثانية: إصلاح الواجهة الخلفية (enhanced-upload.ts)
الهدف: جعل الواجهة الخلفية تستقبل الحدود الصحيحة من سكربت المعالجة وتستخدمها بدلاً من الحدود الثابتة.
المطلوب:
قراءة نتيجة Python: في دالة processLayerEnhanced، قم بتحليل الـ stdout القادم من سكربت Python للحصول على كائن JSON.
استخدام البيانات الصحيحة: عند تحديث حالة الطبقة (layerStates.set)، استخدم result.bounds_wgs84 القادمة من سكربت Python لتعيين قيمة bounds.
إزالة الحدود الثابتة: قم بإزالة السطر الذي يقوم بتعيين الحدود الثابتة لليمن بالكامل.
المهمة الثالثة: التحقق من الواجهة الأمامية (SimpleDigitizationTool.tsx)
الهدف: التأكد من أن الواجهة الأمامية تستقبل وتعرض البيانات الصحيحة.
المطلوب:
استخدام console.log: في دالة onSuccess الخاصة بـ uploadMutation، أضف console.log(JSON.stringify(result, null, 2)) لطباعة البيانات التي تصل من الخادم.
التحقق من الـ Console: بعد رفع الملف، تحقق من نافذة الـ Console في المتصفح. يجب أن ترى كائن الطبقة مع حقل bounds يحتوي على إحداثيات منطقية وصغيرة (ليست إحداثيات اليمن كله).
الهدف النهائي: بعد تطبيق هذه الإصلاحات الثلاثة، عند رفع ملف ZIP، يجب أن تظهر الصورة فوراً على الخريطة في موقعها الجغرافي الصحيح والدقيق، مهما كان صغيراً.