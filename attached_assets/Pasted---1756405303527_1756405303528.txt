الخطة النهائية لإصلاح وتطوير أداة الرقمنة الجغرافية
الهدف الاستراتيجي: تحويل أداة الرقمنة من وضعها الحالي غير الفعال إلى أداة احترافية وموثوقة قادرة على عرض الصور الجغرافية (GeoTIFF) في موقعها الصحيح فوق خريطة أساس ديناميكية، مع توفير أدوات تحكم أساسية للمستخدم.
المرحلة الأولى: إصلاح الواجهة الخلفية (Backend) - (الأولوية القصوى)
الهدف: بناء خدمة خلفية قوية تقوم بالعمليات المعقدة لتحضير الصور قبل إرسالها للعرض.
المهمة 1.1: تطوير خدمة المعالجة المسبقة (Preprocessing Service)
الإجراء: تعديل نقطة النهاية POST /api/gis/layers/confirm لتصبح خدمة معالجة متكاملة.
الخطوات الفنية:
التحقق من المدخلات: عند استدعاء النقطة، يجب أن يقوم الخادم أولاً بالتحقق من أن ملف الـ .zip المرفوع يحتوي على الملفات الأساسية: ملف صورة (.tif أو .tiff) وملف إسناد جغرافي (.prj). إذا كانت الملفات ناقصة، يجب إرجاع رسالة خطأ واضحة للمستخدم.
تشغيل سكربت Python: استدعاء سكربت Python متخصص (مثل enhanced-geotiff-processor.py) وتمرير مسار الملف المضغوط إليه.
تنفيذ المعالجة: يجب أن يقوم سكربت Python بالآتي:
استخراج الحدود (Bounds): استخدام مكتبة rasterio لقراءة حدود الصورة الأربعة (أعلى، أسفل، يمين، يسار) بنظام إحداثياتها الأصلي (UTM).
استخراج نظام الإحداثيات (CRS): قراءة محتوى ملف .prj وحفظه كنص (WKT - Well-Known Text).
تحويل الصورة (اختياري ولكن موصى به): تحويل صورة GeoTIFF إلى صيغة PNG لضمان التوافق مع جميع المتصفحات.
تحديث قاعدة البيانات: بعد نجاح المعالجة، يجب على الخادم تحديث سجل الطبقة في قاعدة البيانات بالمعلومات المستخرجة:
bounds: مصفوفة تحتوي على إحداثيات الأركان.
crs_wkt: نص نظام الإحداثيات.
imageUrl: رابط الصورة الجديدة بصيغة PNG (أو GeoTIFF إذا لم يتم التحويل).
إرجاع البيانات للواجهة الأمامية: إعادة كائن JSON يحتوي على جميع المعلومات الجديدة للطبقة.
المرحلة الثانية: إعادة بناء الواجهة الأمامية (Frontend)
الهدف: بناء واجهة عرض خرائط احترافية تعتمد على مكتبات متخصصة قادرة على فهم وعرض البيانات الجغرافية المعالجة.
المهمة 2.1: دمج مكتبات الخرائط المتخصصة
الإجراء: إزالة أي محاولات سابقة لعرض الخرائط واستبدالها بحل احترافي.
الخطوات الفنية:
تثبيت المكتبات: تثبيت مكتبة Leaflet مع إضافة Proj4Leaflet في المشروع.
Bash
npm install leaflet proj4 proj4leaflet
إنشاء مكون خريطة جديد: بناء مكون React جديد (مثلاً: AdvancedMapCanvas.tsx) مخصص لعرض الخرائط.
المهمة 2.2: تطوير منطق عرض الطبقات
الإجراء: كتابة الكود اللازم لعرض الصورة المستلمة من الواجهة الخلفية.
الخطوات الفنية:
تعريف نظام الإحداثيات: داخل المكون، يجب تعريف نظام الإحداثيات UTM Zone 38N باستخدام Proj4js، تماماً كما هو موضح في ملف main.js الذي أرفقته سابقاً.
استخدام L.imageOverlay: عند استلام بيانات الطبقة من الواجهة الخلفية، يجب استخدام دالة L.imageOverlay لعرض الصورة. نقطة حاسمة: يجب تمرير الحدود بنظام UTM (التي تم استخراجها في الواجهة الخلفية) مباشرة إلى هذه الدالة، مع تحديد نظام الإحداثيات المخصص (L.CRS الذي تم إنشاؤه باستخدام Proj4Leaflet).
التمركز التلقائي: استخدام دالة map.fitBounds() لتكبير الخريطة تلقائياً لتناسب حدود الصورة المعروضة.
المهمة 2.3: إضافة خريطة أساس ديناميكية
الإجراء: توفير سياق جغرافي للمستخدم.
الخطوات الفنية:
إضافة طبقة أساس من OpenStreetMap أو Esri World Imagery إلى الخريطة.
(ميزة متقدمة): إضافة أداة للتبديل بين الخريطة الأساسية (الشوارع) وصور الأقمار الصناعية.
المرحلة الثالثة: الاختبار والتحقق
الهدف: التأكد من أن الحل يعمل بشكل صحيح ومتكامل.
المهمة 3.1: اختبار دورة العمل الكاملة
الإجراء: تنفيذ سيناريو كامل من البداية إلى النهاية.
الخطوات:
رفع ملف .zip يحتوي على (GeoTIFF + .prj).
مراقبة سجلات الخادم (Server Logs) للتأكد من أن المعالجة تمت بنجاح.
مراقبة سجلات المتصفح (Browser Console) للتأكد من أن الواجهة الأمامية استقبلت البيانات الصحيحة.
التحقق بصرياً من أن الصورة تظهر في موقعها الصحيح فوق الخريطة الأساسية.
التحقق من أن إحداثيات الماوس المعروضة تتوافق مع نظام UTM.
بهذه الخطة المكونة من ثلاث مراحل، نحن نعالج المشكلة من جذورها، ونضمن أن كل جزء من النظام (الخلفية، الأمامية، الاختبار) يقوم بدوره بشكل صحيح، مما يؤدي إلى حل نهائي ومستدام.