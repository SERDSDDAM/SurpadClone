ممتاز — بما أنّ الـAgent أنشأ صفحة تسجيل دخول للموظفين، فأفضل خطوة الآن هي استغلالها وتأمينها ودمجها مع نظام المصادقة والـRBAC قبل أن تتابع تطوير وظائف الرقمنة المتقدم (Phase‑2 Sprint C). أدناه خطة قصيرة ومباشرة لما تفعله الآن (خطوات فورية) مع أمثلة كود جاهزة للنسخ، ثم خطة متابعة لما يجب العمل عليه بعد ذلك.

خلاصة ما تفعله الآن (الخطوات الفورية)
1) لا توقف النشر ولا تحذف Preview — استغلها لاختبار واجهة الدخول.  
2) أدمج الواجهة مع API مصادقة (إن لم يكن موجوداً) — أنشئ endpoint تسجيل الدخول، جلسة آمنة (HttpOnly cookie) أو JWT.  
3) أنشئ مستخدم إداري اختباري (seed) في DB لتسجيل الدخول أولاً.  
4) اختبر الدخول: تحقق الـnetwork (request/response)، التوكن/الكوكي، حماية المسارات (guard).  
5) بعد التحقق: أضف الحماية لصفحات الرقمنة (حظر الوصول لغير المصرح لهم).  

تفصيل الخطوات مع أمثلة كود

A — API تسجيل الدخول (Node + Express + bcrypt + jwt)  
(ضع هذا في server/routes/auth.ts أو ضمن routes)

```ts
// server/routes/auth.ts (TypeScript - مبسط)
import express from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import db from '../db'; // وحدة لتشغيل الاستعلامات

const router = express.Router();
const JWT_SECRET = process.env.JWT_SECRET || 'change_this_strong';

router.post('/login', async (req, res) => {
  const { username, password } = req.body;
  // ابحث عن المستخدم في DB (مثال)
  const { rows } = await db.query('SELECT id, username, password_hash, role FROM users WHERE username=$1', [username]);
  const user = rows[0];
  if (!user) return res.status(401).json({ error: 'Invalid credentials' });

  const ok = await bcrypt.compare(password, user.password_hash);
  if (!ok) return res.status(401).json({ error: 'Invalid credentials' });

  const token = jwt.sign({ sub: user.id, role: user.role }, JWT_SECRET, { expiresIn: '8h' });

  // امنح التوكن كـHttpOnly cookie (موصى به)
  res.cookie('token', token, {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'lax',
    maxAge: 8 * 3600 * 1000
  });

  res.json({ success: true, user: { id: user.id, username: user.username, role: user.role } });
});

export default router;
```

B — Middleware لحماية Routes (auth + role check)
```ts
// server/middleware/auth.ts
import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
const JWT_SECRET = process.env.JWT_SECRET || 'change_this_strong';

export function authMiddleware(req: Request, res: Response, next: NextFunction) {
  const token = req.cookies?.token || req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'Unauthorized' });
  try {
    const payload = jwt.verify(token, JWT_SECRET) as any;
    (req as any).user = payload;
    next();
  } catch (e) {
    return res.status(401).json({ error: 'Invalid token' });
  }
}

export function requireRole(role: string) {
  return (req: Request, res: Response, next: NextFunction) => {
    const user = (req as any).user;
    if (!user || user.role !== role) return res.status(403).json({ error: 'Forbidden' });
    next();
  };
}
```

ثم استخدمها في الـroutes الحساسة:
```ts
router.post('/features', authMiddleware, (req,res) => { ... });
// أو لحماية كامل صفحة الرقمنة:
app.use('/phase2-digitization', authMiddleware, serveReactApp);
```

C — Client side: إرسال بيانات الدخول (Axios example)
```ts
// client/src/api/auth.ts
import axios from 'axios';
export async function login(username: string, password: string) {
  const res = await axios.post('/api/auth/login', { username, password }, { withCredentials: true });
  return res.data;
}
```
- ملاحظة: `withCredentials: true` يضمن إرسال واستقبال الكوكي.

D — إنشاء مستخدم اختباري (seed) مع bcrypt
يمكنك تشغيل سكربت Node صغير لإنشاء مستخدم admin:

```js
// scripts/create_admin_user.js
const bcrypt = require('bcrypt');
const { Client } = require('pg');
(async () => {
  const client = new Client({ connectionString: process.env.DATABASE_URL });
  await client.connect();
  const password = 'Admin@12345';
  const hash = await bcrypt.hash(password, 12);
  await client.query('INSERT INTO users (id, username, password_hash, role, created_at) VALUES (gen_random_uuid(), $1, $2, $3, now()) ON CONFLICT (username) DO NOTHING', ['admin', hash, 'admin']);
  console.log('created admin with password:', password);
  await client.end();
})();
```
شغّله محليًا أو في بيئة dev: `node scripts/create_admin_user.js`

E — فحوص سريعة بعد الدمج
1. افتح صفحة /auth/employee-login → أدخل user/admin credentials → اضغط Login.  
2. راجع الشبكة (DevTools) → تحقق من response 200 ووجود cookie `token`.  
3. حاول الوصول لصفحة /phase2-digitization بدون login → يجب أن يرد 401 أو يعيد لتسجيل الدخول.  
4. بعد login → اذهب للصفحة → أدخل أدوات الرسم → ارسم مضلع → ادخِل السمات → حفظ → تحقق أن المعلم ظهر في DB (SELECT FROM gis.features).

F — اجراءات أمنية سريعة (مباشرة)
-Hash passwords: bcrypt ≥ 12 salt rounds (كما بالأمثلة).  
-HttpOnly cookies أو secure tokens (لا تخزن JWT في localStorage).  
-Rate limit للـ/ login endpoint (مثال: express-rate-limit).  
-تفعيل Helmet + CSP.

G — إذا كل شيء يعمل: ماذا بعد؟
- استمر بالسبرينت C (vectorization POC) بينما تحسّن auth + role management (user settings, per-user visibility).  
- جدولة عمل: الآن Sprint C (2 أسابيع) لعمل worker vectorize وواجهة مراجعة الاقتراحات.

خطة تنفيذ قصيرة (اليوم/الأسبوع)
اليوم (فورًا):
- 1) تأكّد أن endpoint /api/auth/login موجود وقم بإنشاء مستخدم admin.  
- 2) اربط صفحة الدخول مع الـAPI وجرب login/logout.  
- 3) احفظ حالة الجلسة (cookie) وتأكد حماية route `/phase2-digitization`.

خلال 3 أيام:
- أضف forgot-password (email) + reset token.  
- أضف role permission check: surveyor, inspector, admin.  
- ابدأ seed لعدد من المستخدمين التجريبيين.

الأسبوع التالي:
- Sprint C: vectorization POC + UI for suggestions.  
- API for review/accept suggestions + saving as features.

هل أبدأ أنا فورًا بـ:
- (1) تجهيز سكربت إنشاء admin وتفعيله (أقوم بعمل PR أو أطلع السكربت لتشغله)؟  
- (2) إعداد endpoint /api/auth/login وتوصيله بالواجهة (أجهز الكود الكامل وأضيفه للـrepo)؟  
- (3) كل ما سبق (1+2) وانفّذها الآن نيابةً عنك (أرسل أوامر للـAgent)؟

قل لي رقم الخيار (1/2/3) أو "لا أريد الآن — اشرح لي خطوة بالخطوة" وسأباشر التنفيذ أو أعطيك ملفات/أوامر جاهزة.